<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IOS | Shaojie's Blog]]></title>
  <link href="http://www.shaojie.name/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://www.shaojie.name/"/>
  <updated>2016-01-06T22:37:19+08:00</updated>
  <id>http://www.shaojie.name/</id>
  <author>
    <name><![CDATA[Shao jie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cocoapods安装和使用]]></title>
    <link href="http://www.shaojie.name/blog/2014/05/05/cocoapod/"/>
    <updated>2014-05-05T22:44:04+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/05/05/cocoapod</id>
    <content type="html"><![CDATA[<h4>CocoaPods是什么</h4>

<p>当你开发iOS应用时，会经常使用到很多第三方开源类库，比如JSONKit，AFNetWorking等等。可能某个类库又用到其他类库，所以要使用它，必须得另外下载其他类库，而其他类库又用到其他类库，“子子孙孙无穷尽也”，这也许是比较特殊的情况。总之小编的意思就是，手动一个个去下载所需类库十分麻烦。另外一种常见情况是，你项目中用到的类库有更新，你必须得重新下载新版本，重新加入到项目中，十分麻烦。如果能有什么工具能解决这些恼人的问题，那将“善莫大焉”。所以，你需要 CocoaPods。</p>

<p>CocoaPods应该是iOS最常用最有名的类库管理工具了，上述两个烦人的问题，通过cocoaPods，只需要一行命令就可以完全解决，当然前提是你必须正确设置它。重要的是，绝大部分有名的开源类库，都支持CocoaPods。所以，作为iOS程序员的我们，掌握CocoaPods的使用是必不可少的基本技能了</p>

<h4>如何下载和安装CocoaPods</h4>

<p>在安装CocoaPods之前，首先要在本地安装好Ruby环境</p>

<p>假如你在本地已经安装好Ruby环境，那么下载和安装CocoaPods将十分简单，只需要一行命令。在Terminator（也就是终端）中输入以下命令</p>

<p><code>
sudo gem install cocoapods
pod setup
</code>
上面第二行执行时，会输出Setting up CocoaPods master repo，但是会等待比较久的时间。这步其实是Cocoapods在将它的信息下载到 ~/.cocoapods目录下，如果你等太久，可以试着cd到那个目录，用du -sh *来查看下载进度</p>

<p>如果你在终端中敲入这个命令之后，会发现半天没有任何反应,可以更新一下ruby的源：
<code>
gem sources --remove https://rubygems.org/
gem sources -a http://ruby.taobao.org/
gem sources -l
</code></p>

<h4>如何使用CocoaPod</h4>

<ol>
<li>利用CocoaPods，在项目中导入AFNetworking类库
 AFNetworking类库在GitHub地址是：<a href="https://github.com/AFNetworking/AFNetworking">https://github.com/AFNetworking/AFNetworking</a>
为了确定AFNetworking是否支持CocoaPods，可以用CocoaPods的搜索功能验证一下。在终端中输入：
<code>
pod search AFNetWorking
</code>
过几秒钟之后，你会在终端中看到关于AFNetworking类库的一些信息</li>
</ol>


<p>``
&ndash;> AFNetworking (2.2.1)
   A delightful iOS and OS X networking framework.
   pod &lsquo;AFNetworking&rsquo;, &lsquo;~> 2.2.1&rsquo;
   &ndash; Homepage: <a href="https://github.com/AFNetworking/AFNetworking">https://github.com/AFNetworking/AFNetworking</a>
   &ndash; Source:   <a href="https://github.com/AFNetworking/AFNetworking.git">https://github.com/AFNetworking/AFNetworking.git</a>
   &ndash; Versions: 2.2.1, 2.2.0, 2.1.0, 2.0.3, 2.0.2, 2.0.1, 2.0.0-RC3, 2.0.0-RC2, 2.0.0-RC1, 2.0.0, 1.3.3, 1.3.2, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0RC3, 1.0RC2, 1.0RC1, 1.0.1, 1.0, 0.9.2, 0.9.1, 0.9.0, 0.7.0, 0.5.1, 0.10.1, 0.10.0 [master repo]
   &ndash; Sub specs:</p>

<pre><code> - AFNetworking/Serialization (2.2.1)
 - AFNetworking/Security (2.2.1)
 - AFNetworking/Reachability (2.2.1)
 - AFNetworking/NSURLConnection (2.2.1)
 - AFNetworking/NSURLSession (2.2.1)
 - AFNetworking/UIKit (2.2.1)
</code></pre>

<p>``
这说明，AFNetworking是支持CocoaPods，所以我们可以利用CocoaPods将AFNetworking导入你的项目中。
先利用Xcode创建一个项目，在项目的目录下新建一个名为Podfile的文件
<code>
platform :ios, '7.0'
pod "AFNetworking", "~&gt; 2.2.0"
</code>
这两句文字的意思是，当前AFNetworking支持的iOS最高版本是iOS 7.0, 要下载的AFNetworking版本是2.2.0。</p>

<p>这时候，你就可以利用CocoPods下载AFNetworking类库了。还是在终端中的当前项目目录下，运行以下命令：
<code>
pod install
</code>
运行完成后，使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件
每次更改了Podfile文件，你需要重新执行一次pod install命令</p>

<h4>.gitignore</h4>

<p>当你执行pod install之后，除了Podfile外，cocoapods还会生成一个名为Podfile.lock的文件，你不应该把这个文件加入到.gitignore中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行pod install 不会更改版本，要pod update才会改Podfile.lock了。这样多人协作的时候，可以防止第三方库升级把程序搞挂</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios sqlite3使用]]></title>
    <link href="http://www.shaojie.name/blog/2014/05/01/ios-sqlite/"/>
    <updated>2014-05-01T00:20:18+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/05/01/ios-sqlite</id>
    <content type="html"><![CDATA[<h5>iOS中使用</h5>

<p>在 iOS 中 sqlite3 库是一套纯 C 的接口，因此很方便地就可以在 obj-c 源码中无痕使用它
首先，需要在Frameworks中加入所需的库Library   libsqlite3.0.dylib</p>

<p>这样可以导入头文件了</p>

<p>```</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &ldquo;sqlite3.h&rdquo;</h1>

<h1>define kDatabaseName @&ldquo;city.db&rdquo;</h1>

<p>@interface ViewController (){</p>

<pre><code>  sqlite3 * database;
</code></pre>

<p>}
@end
```</p>

<h4>初始化数据库</h4>

<p>```
&ndash;(BOOL)initializeDb {</p>

<pre><code>NSLog(@"initializeDB");
// look to see if DB is in known location (~/Documents/$DATABASE_FILE_NAME)
//START:code.DatabaseShoppingList.findDocumentsDirectory
NSArray *searchPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
NSString *documentFolderPath = [searchPaths objectAtIndex:0];
//查看文件目录
NSLog(@"%@", documentFolderPath);
self.databaseFilePath = [documentFolderPath stringByAppendingPathComponent:@"city.db"];

if(![[NSFileManager defaultManager] fileExistsAtPath:self.databaseFilePath]){
    //didnit find db, need to copy
    NSString *backupDbPath = [[NSBundle mainBundle] pathForResource:@"city" ofType:@"db"];

    if(backupDbPath == nil) {
        //couldn't find backup db to copy
        return NO;
    }else {
        BOOL copiedBackupDb = [[NSFileManager defaultManager] copyItemAtPath:backupDbPath toPath:self.databaseFilePath error:nil];
        if(!copiedBackupDb){
            return NO;
        }
    }

}
return TRUE;
</code></pre>

<p>}
```</p>

<h4>创建表</h4>

<p>```
&ndash;(BOOL) createTable{</p>

<pre><code>char *sql = "CREATE TABLE city (id integer primary key, cid integer, cityName text)";
sqlite3_stmt *statment;
char *errorMsg;
if(sqlite3_exec(database, sql, NULL, NULL, &amp;errorMsg) != SQLITE_OK){
    NSLog(@"Error: create table failed %s", sqlite3_errmsg(database));
    return NO;
}

int success = sqlite3_finalize(statment);
if(success != SQLITE_DONE){
    NSLog(@"failed to dehydate: %s", sqlite3_errmsg(database));
    return NO;
}
return YES;
</code></pre>

<p>}
```</p>

<h4>向表中插入记录</h4>

<p>```
&ndash;(BOOL) insertOne{</p>

<pre><code>char *errorMsg;
const char *sql = "insert into city (cid, cityName) values(101, '上海')";
if(sqlite3_exec(database, sql, NULL, NULL, &amp;errorMsg) == SQLITE_OK){
    NSLog(@"Insert ok");
    return YES;
}else{
    NSLog(@"error: %s",errorMsg);
    sqlite3_free(errorMsg);
    return  NO;
}
</code></pre>

<p>}
```</p>

<h4>查询数据库</h4>

<p>```
&ndash;(void) showCitys{</p>

<pre><code>const char * sql = "select * from city";
sqlite3_stmt *statment;
if(sqlite3_prepare_v2(database, sql, -1, &amp;statment, nil) == SQLITE_OK) {
    NSLog(@"select ok.");
}
while(sqlite3_step(statment) == SQLITE_ROW) {
    int id = sqlite3_column_int(statment, 1);
    //char *name = (char *) sqlite3_column_text(statment, 2);
    //直接用的char类型来中文会有乱码，使用NSString代替
    NSString *name=[[NSString alloc] initWithCString:(char *)sqlite3_column_text(statment , 2) encoding:NSUTF8StringEncoding];
    NSLog(@"row &gt;&gt;id %i, name %@", id, name);
}

sqlite3_finalize(statment);
</code></pre>

<p>}
```</p>

<h4>关闭数据库</h4>

<p>```
&ndash; (void)viewDidUnload {</p>

<p>   sqlite3_close(database);</p>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
