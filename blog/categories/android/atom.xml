<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Shaojie's Blog]]></title>
  <link href="http://www.shaojie.name/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://www.shaojie.name/"/>
  <updated>2016-01-06T22:47:00+08:00</updated>
  <id>http://www.shaojie.name/</id>
  <author>
    <name><![CDATA[Shao jie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android MVP 模式]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/24/android-mvp/"/>
    <updated>2014-03-24T23:06:01+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/24/android-mvp</id>
    <content type="html"><![CDATA[<h4>MVP模式与MVC模式</h4>

<p>MVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller
<img src="http://img.hb.aicdn.com/c098e0b36a1be7bb989ca451e2f084d5758eb88b4e76-x3xslP_fw658" alt="" /></p>

<h4>什么是MVC(Model View Presenter)模式</h4>

<ol>
<li>为了使得视图接口可以与模型和控制器进行交互，控制器执行一些初始化事件</li>
<li>用户通过视图（用户接口）执行一些操作</li>
<li>控制器处理用户行为(可以用观察着模式实现)并通知模型进行更新</li>
<li>模型引发一些事件，以便将改变发告知视图</li>
<li>视图处理模型变更的事件，然后显示新的模型数据</li>
<li>用户接口等待用户的进一步操作</li>
</ol>


<h4>Example</h4>

<p>首先，我们先申明View的接口，有2个简单的方法</p>

<p>``` java viewInterface
public inteface IResultsView {</p>

<pre><code>//set title
public void showTitle(String title);

//set result text
public void showResults(String results);
</code></pre>

<p>}
```</p>

<p>这些方法是说明我希望View中视图的变化，这里不关心它怎么发生的</p>

<p>然后再定义一个Presenter的接口
``` java presenterInteface <a href="http://www.shaojie.name">http://www.shaojie.name</a>
public interface IResultsPresenter{</p>

<pre><code>public void onResume(Context context);
</code></pre>

<p>}
<code>
在视图里（Activity/Fragemnt）里onResume()触发的时候，调用Presenter。
</code>
java ResultsPreseter
public class ResultsPresenter implements IResultsPresenter {</p>

<pre><code>private IResultsView resultsView;

public ResultsPresenter(IResultsView resultsView) {
    this.resultsView = resultsView;
}

@Override
public void onResume(Context context) {

    // Get a title
    getTitle(context);


    // Get results
    getResults(context);

}
</code></pre>

<p>}
```
这里，会触发IResultView里定义的2个函数</p>

<p>```
public class FragmentResults extends Fragment implements IResultsView {</p>

<pre><code>private View view;
private TextView title, content;
private IResultsPresenter presenter;

public FragmentResults() {
    // Required empty public constructor
}


@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {
    view = inflater.inflate(R.layout.fragment_results, null);

    return view;
}

@Override
public void onViewCreated(View view, Bundle savedInstanceState) {
    super.onViewCreated(view, savedInstanceState);

    presenter = new ResultsPresenter(this);

    title = (TextView) view.findViewById(R.id.results_title);
    content = (TextView) view.findViewById(R.id.results_text);
}

@Override
public void onResume() {
    super.onResume();

    presenter.onResume(getActivity());
}

@Override
public void showTitle(String title) {

    this.title.setText(title);
}

@Override
public void showResults(String results) {

    content.setText(results);
}
</code></pre>

<p>```</p>

<p>很明显，我们就可以脱离用户接口来测试这些逻辑
```
public class TestResultsPresenter extends AndroidTestCase {</p>

<pre><code>private IResultsPresenter resultsPresenter;
private String resultTitle;
private String resultData;

public TestResultsPresenter() {
    super();
}

@Override
protected void setUp() throws Exception {
    super.setUp();

    IResultsView resultsView = new TestResultsView();
    resultsPresenter = new ResultsPresenter(resultsView);
}

@Override
protected void tearDown() throws Exception {
    super.tearDown();
    resultsPresenter = null;
}

public void testResultFormat() {
    Utilities.SmsResultManager smsResultManager = Utilities.SmsResultManager.getInstance(getContext());
    smsResultManager.removeAllSmsResults();
    smsResultManager.saveResult("foo", new SmsResult("ark", "foo"));

    // Build expected Content
    String expectedContent = "ark\t\tfoo\t\tUnknown\n";

    resultsPresenter.onResume(getContext());

    assertEquals(expectedContent, resultData);
}


public void testResultTitle(){

    // put something
    Date nowDate = new Date();
    DateFormat df = DateFormat.getDateTimeInstance(
            DateFormat.SHORT,
            DateFormat.SHORT,
            Locale.getDefault());

    // Set date time in prefs
    Preferences.writePreferenceValue(getContext(),
            getContext().getString(R.string.pref_emergency_date_time_key), nowDate.getTime());

    String formattedDateTime = df.format(nowDate);
    String expectedTitle = String.format(getContext().getString(R.string.results_title),
            formattedDateTime);

    // Trigger onResume event in Results Presenter
    resultsPresenter.onResume(getContext());

    // Test not null
    assertNotNull(resultTitle);

    // Test as expected
    assertEquals(expectedTitle, resultTitle);
}


private class TestResultsView implements IResultsView {

    @Override
    public void showTitle(String title) {
        resultTitle = title;
    }

    @Override
    public void showResults(String results) {
        resultData = results;
    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handy adb commands for Android]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/24/adb-commands-for-android/"/>
    <updated>2014-03-24T23:05:52+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/24/adb-commands-for-android</id>
    <content type="html"><![CDATA[<h4>查看连接的设备</h4>

<p>使用这个命令查看当前连接的所有设备和它们的ID</p>

<p><code>adb devices</code></p>

<p>如果你有多个设备连接，使用<code>adb -s DEVICE_ID</code>选中你需要操作的设备</p>

<h4>安装应用</h4>

<p>使用<code>install</code>命令安装apk，如果你已经安装过当前程序，并且想保存当前的数据，可以加上``-r```参数来覆盖安装当前程序</p>

<p><code>
adb
</code>
记录下在使用android adb操作时常用的命令，可以方便我们在开发过程中构建和测试程序。</p>

<h4>卸载程序</h4>

<p><code>
adb uninstall PACKAGE_NAME
//example
adb uninstall com.shaojie.name.example
</code></p>

<h4>启动一个Activity</h4>

<p><code>
adb shell am start PACKAGE_NAME/ACTIVITY_IN_PACKAGE
adb shell am start PACKAGE_NAME/FULLY_QUALIFIED_ACTIVITY
//example
adb shell am start -n com.shaojie.name.example/.MainActiivty
adb shell am start -n com.shaojie.name.example/com.shaojie.name.MainActivity
</code></p>

<h4>进入设备的shell</h4>

<p><code>
adb shell
</code></p>

<h4>截屏</h4>

<p><code>
adb shell screencap -p | perl -pe 's/\x0D\x0A/\x0A/g' &gt; screen.png
</code></p>

<h4>点击电源键</h4>

<p>这个命令发送一个关闭屏幕的事件到设备
<code>
adb shell input keyevent 26
</code></p>

<h4>屏幕解锁</h4>

<p>与上面的命令作用相反，用于点亮屏幕解锁
<code>
adb shell input keyevent 82
</code></p>

<h4>显示安装的程序包</h4>

<p><code>
adb shell pm list packages -f
</code></p>

<h4>Logging</h4>

<p>显示系统的日志到命令行
<code>
adb logcat
</code></p>

<h4>TagName过滤</h4>

<p><code>
adb logcat -s TAG_NAME
adb logcat -s TAG_NAME_1 TAG_NAME_2
//
adb logcat -s TEST
adb logcat -s TEST MYAPP
</code></p>

<h4>优先级过滤</h4>

<p>显示某个级别以及以上优先级的日志
<code>
adb logcat "*:PRIORITY"
//example
adb logcat "*:W"
</code>
* V-Verbose
* D_Debug
* I-Info
* W-Warning
* E-Error
* F-Fatal
* S-Silent(最高级别)</p>

<h4>优先级和tagname过滤</h4>

<p><code>
adb logcat -s TAG_NAME:PRIORITY
adb logcat -s TAG_NAME_1:PRIORITY TAG_NAME_2:PROPRITY
//example
adb logcat -s TEST: W
</code></p>

<h4>grep过滤</h4>

<p><code>
adb logcat | grep "SEARCH_TERM"
adb logcat | grep "SEARCH_TERM_1\|SEARCH_TERM_2"
//example
adb logcat | grep "Exception"
adb logcat | grep "Exveption\|Error"
</code></p>

<h4>清除logcat日志</h4>

<p><code>
adb logcat -c
</code></p>

<h4>更多</h4>

<p>更加细节，当然是官方文档，<a href="http://developer.android.com/tools/help/adb.html">传送门</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Asynchronous Loader]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/24/android-asynchronous-Loader/"/>
    <updated>2014-03-24T23:05:43+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/24/android-asynchronous-Loader</id>
    <content type="html"><![CDATA[<h4>Loader概述</h4>

<p>装载器从android3.0开始引进。它使得在activity或fragment中异步加载数据变得简单。装载器具有如下特性:</p>

<ul>
<li>它们对每个Activity和Fragment都有效</li>
<li>他们提供了异步加载数据的能力</li>
<li>它们监听数据，并在数数据发生变化时传递新的结果</li>
<li>当由于配置改变而被重新创建后，它们自动重连到上一个加载器的游标，所以不必重新查询数据</li>
</ul>


<h5>API概述</h5>

<h6>LoaderManager</h6>

<p>一个抽像类，关联到一个Activity或Fragment，管理一个或多个装载器的实例。这帮助一个应用管理那些与Activity或Fragment的生命周期相关的长时间运行的的操作。最常见的方式是与一个CursorLoader一起使用，然而应用是可以随便写它们自己的装载器以加载其它类型的数据。
每个activity或fragment只有一个LoaderManager。但是一个LoaderManager可以拥有多个装载器。</p>

<h6>LoadManager.LoaderCallbacks</h6>

<p>一个用于客户端与LoaderManager交互的回调接口。例如，你使用回调方法onCreateLoader()来创建一个新的装载器。</p>

<h6>Loader</h6>

<p>一个执行异步数据加载的抽象类。它是加载器的基类。你可以使用典型的CursorLoader，但是你也可以实现你自己的子类。一旦装载器被激活，它们将监视它们的数据源并且在数据改变时发送新的结果。</p>

<h6>AsyncTaskLoader</h6>

<p>提供一个AsyncTask来执行异步加载工作的抽象类。</p>

<h6>CursorLoader</h6>

<p>AsyncTaskLoader的子类，它查询ContentResolver然后返回一个Cursor。这个类为查询cursor以标准的方式实现了装载器的协议，它的游标查询是通过AsyncTaskLoader在后台线程中执行，从而不会阻塞界面。使用这个装载器是从一个ContentProvider异步加载数据的最好方式。相比之下，通过fragment或activity的API来执行一个被管理的查询就不行了</p>

<h5>使用</h5>

<p>一个使用装载器的应用会包含如下组件：</p>

<ul>
<li>一个Activity或Fragment</li>
<li>一个LoaderManager的实例</li>
<li>一个加载被ContentProvider所支持的数据的CursorLoader．或者，你可以从Loader或AsyncTaskLoader实现你自己的装载器来从其它源加载数据</li>
<li>一个LoaderManager.LoaderCallbacks的实现．这是你创建新的装载器以及管理你的已有装载器的引用的地方</li>
<li>一个显示装载器的数据的途径，例如使用一个SimpleCursorAdapter</li>
<li>一个数据源，比如当是用CursorLoader时，它将是一个ContentProvider</li>
</ul>


<h5>启动一个装载器</h5>

<p>LoaderManager管理一个Activiry或Fragment中的一个或多个装载器．但每个activity或fragment只拥有一个LoaderManager．</p>

<p>你通常要在activity的onCreate()方法中或fragment的onActivityCreated()方法中初始化一个装载器．你可以如下创建：
<code>
getLoaderManager().initLoader(0,null, this);  
</code>
initLoader()方法有一下参数</p>

<ul>
<li>一个唯一ID来标志装载器．在这个例子中，ID是0</li>
<li>可选的参数，用于装载器初始化时(本例中是null)</li>
<li>一个LoaderManager.LoaderCallbacks的实现．被LoaderManager调用以报告装载器的事件，在这个例子中，类本实现了这个接口，所以传的是它自己：this</li>
</ul>


<p>initLoader()保证一个装载器被初始化并激活．它具有两种可能的结果：</p>

<ul>
<li>如果ID所指的装载器已经存在，那么这个装载器将被重用</li>
<li>如果装载器不存在，initLoader()就触发LoaderManager.LoaderCallbacks的方法onCreateLoader()．这是你实例化并返回一个新装载器的地方</li>
</ul>


<p>在这两种情况中，传入的LoaderManager.LoaderCallbacks的实现都与装载器绑定在一起．并且会在装载器状态变化时被调用．如果在调用这个方法时，调用者正处于启动状态，并且所请求的装载器已存在并产生了数据，那么系统会马上调用onLoadFinished()(也就是说在initLoader()还在执行时)．所以你必须为这种情况的发生做好准备.</p>

<h5>重启装载器</h5>

<p>当你使用initLoader()时，如果指定ID的装载器已经存在，则它使用这个装载器．如果不存在呢，它将创建一个新的．但是有时你却是想丢弃旧的然后开始新的数据．</p>

<p>要想丢弃旧数据，你应使用restartLoader()。</p>

<h5>回调</h5>

<p>LoaderManager.LoaderCallbacks是一个回调接口，它使得客户端可以与LoaderManager进行交互．</p>

<p>装载器，一般指的是CursorLoader，我们希望在它停止后依然保持数据．这使得应用可以在activity或fragment的 onStop() 和onStart() 之间保持数据，所以当用户回到一个应用时，它们不需等待数据加载．你使用LoaderManager.LoaderCallbacks 的方法们，在需要时创建新的装载器，并且告诉应用什么时候要停止使用装载器的数据．</p>

<p>LoaderManager.LoaderCallbacks 包含以下方法们:</p>

<ul>
<li>onCreateLoader() —跟据传入的ID，初始化并返回一个新的装载器．</li>
<li>onLoadFinished() —当一个装载器完成了它的装载过程后被调用</li>
<li>onLoaderReset() —当一个装载器被重置而什其数据无效时被调用</li>
</ul>


<p>```java Loader www.shaojie.name
public static class CursorLoaderListFragment extends ListFragment</p>

<pre><code>    implements OnQueryTextListener, LoaderManager.LoaderCallbacks&lt;Cursor&gt; {

// This is the Adapter being used to display the list's data.
SimpleCursorAdapter mAdapter;

// If non-null, this is the current filter the user has provided.
String mCurFilter;

@Override public void onActivityCreated(Bundle savedInstanceState) {
    super.onActivityCreated(savedInstanceState);

    // Give some text to display if there is no data.  In a real
    // application this would come from a resource.
    setEmptyText("No phone numbers");

    // We have a menu item to show in action bar.
    setHasOptionsMenu(true);

    // Create an empty adapter we will use to display the loaded data.
    mAdapter = new SimpleCursorAdapter(getActivity(),
            android.R.layout.simple_list_item_2, null,
            new String[] { Contacts.DISPLAY_NAME, Contacts.CONTACT_STATUS },
            new int[] { android.R.id.text1, android.R.id.text2 }, 0);
    setListAdapter(mAdapter);

    // Prepare the loader.  Either re-connect with an existing one,
    // or start a new one.
    getLoaderManager().initLoader(0, null, this);
}

@Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
    // Place an action bar item for searching.
    MenuItem item = menu.add("Search");
    item.setIcon(android.R.drawable.ic_menu_search);
    item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
    SearchView sv = new SearchView(getActivity());
    sv.setOnQueryTextListener(this);
    item.setActionView(sv);
}

public boolean onQueryTextChange(String newText) {
    // Called when the action bar search text has changed.  Update
    // the search filter, and restart the loader to do a new query
    // with this filter.
    mCurFilter = !TextUtils.isEmpty(newText) ? newText : null;
    getLoaderManager().restartLoader(0, null, this);
    return true;
}

@Override public boolean onQueryTextSubmit(String query) {
    // Don't care about this.
    return true;
}

@Override public void onListItemClick(ListView l, View v, int position, long id) {
    // Insert desired behavior here.
    Log.i("FragmentComplexList", "Item clicked: " + id);
}

// These are the Contacts rows that we will retrieve.
static final String[] CONTACTS_SUMMARY_PROJECTION = new String[] {
    Contacts._ID,
    Contacts.DISPLAY_NAME,
    Contacts.CONTACT_STATUS,
    Contacts.CONTACT_PRESENCE,
    Contacts.PHOTO_ID,
    Contacts.LOOKUP_KEY,
};
public Loader&lt;Cursor&gt; onCreateLoader(int id, Bundle args) {
    // This is called when a new Loader needs to be created.  This
    // sample only has one Loader, so we don't care about the ID.
    // First, pick the base URI to use depending on whether we are
    // currently filtering.
    Uri baseUri;
    if (mCurFilter != null) {
        baseUri = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,
                Uri.encode(mCurFilter));
    } else {
        baseUri = Contacts.CONTENT_URI;
    }

    // Now create and return a CursorLoader that will take care of
    // creating a Cursor for the data being displayed.
    String select = "((" + Contacts.DISPLAY_NAME + " NOTNULL) AND ("
            + Contacts.HAS_PHONE_NUMBER + "=1) AND ("
            + Contacts.DISPLAY_NAME + " != '' ))";
    return new CursorLoader(getActivity(), baseUri,
            CONTACTS_SUMMARY_PROJECTION, select, null,
            Contacts.DISPLAY_NAME + " COLLATE LOCALIZED ASC");
}

public void onLoadFinished(Loader&lt;Cursor&gt; loader, Cursor data) {
    // Swap the new cursor in.  (The framework will take care of closing the
    // old cursor once we return.)
    mAdapter.swapCursor(data);
}

public void onLoaderReset(Loader&lt;Cursor&gt; loader) {
    // This is called when the last Cursor provided to onLoadFinished()
    // above is about to be closed.  We need to make sure we are no
    // longer using it.
    mAdapter.swapCursor(null);
}
</code></pre>

<p>}
```
Loader的使用分一下几个步骤：</p>

<ul>
<li>实现自己的异步Loader ,如本篇的AsyncTaskLoader或者CursorLoader或者自己继承Loader，第二步需要用到这个Loader</li>
<li>创建数据源 XXXAdapter.</li>
<li>在Activity 或者Fragments 上实现OnQueryTextListener,LoaderManager.LoaderCallbacks接口</li>
<li>在onCreateLoader里面返回Loader，在onLoadfinished里面做清除动作，在onQueryTextChange或者onQueryTextSubmit改变数据源，在onCreate里面让Loader去执行请求数据getLoaderManager().initLoader(0, null, this)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Asynchrous IntentService]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/24/android-asynchronous-IntentService/"/>
    <updated>2014-03-24T23:05:38+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/24/android-asynchronous-IntentService</id>
    <content type="html"><![CDATA[<h4>Service</h4>

<h6>Service种类</h6>

<table>
<thead>
<tr>
<th></th>
<th>类别 </th>
<th> 区别  </th>
<th>  优点   </th>
<th>缺点   </th>
<th>应用   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 本地服务（Local)  </td>
<td> 该服务依附在主进程上  </td>
<td> 服务依附在主进程上而不是独立的进程，这样在一定程度上节约了资源，另外Local服务因为是在同一进程因此不需要IPC，也不需要AIDL。相应bindService会方便很多。  </td>
<td> 主进程被Kill后，服务便会终止</td>
<td>非常常见的应用如：音乐播放服务，Push服务。  |   </td>
</tr>
<tr>
<td></td>
<td> 远程服务（Remote）  </td>
<td> 该服务是独立的进程  </td>
<td> 服务为独立的进程，对应进程名格式为所在包名加上你指定的android:process字符串。由于是独立的进程，因此在Activity所在进程被Kill的时候，该服务依然在运行，不受其他进程影响，有利于为多个进程提供服务具有较高的灵活性  </td>
<td> 该服务是独立的进程，会占用一定资源，并且使用AIDL进行IPC稍微麻烦一点</td>
<td> 一些提供系统服务的Service，这种Service是常驻的  |   </td>
</tr>
</tbody>
</table>


<h5>service运行分类</h5>

<table>
<thead>
<tr>
<th></th>
<th>类别 </th>
<th> 区别 </th>
<th>应用</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>前台服务</td>
<td>会在通知一栏显示 ONGOING 的 Notification</td>
<td>当服务被终止的时候，通知一栏的 Notification 也会消失，这样对于用户有一定的通知作用。常见的如音乐播放服务|</td>
</tr>
<tr>
<td></td>
<td>后台服务</td>
<td>默认的服务即为后台服务，即不会在通知一栏显示 ONGOING 的 Notification</td>
<td>当服务被终止的时候，用户是看不到效果的。某些不需要运行或终止提示的服务，如天气更新，日期同步，邮件同步等|</td>
</tr>
</tbody>
</table>


<h5>Service 与 Thread的区别</h5>

<ol>
<li>Thread：Thread是程序执行的最小单元，它是分配CPU的基本单位。可以用 Thread 来执行一些异步的操作。</li>
<li>Service：Service 是Android的一种机制，当它运行的时候如果是Local Service，那么对应的 Service 是运行在主进程的 main 线程上的。如：onCreate，onStart 这些函数在被系统调用的时候都是在主进程的 main 线程上运行的。如果是Remote Service，那么对应的 Service 则是运行在独立进程的 main 线程上。</li>
</ol>


<p>那么我们为什么要用 Service 呢？其实这跟 android 的系统机制有关，我们先拿 Thread 来说。Thread 的运行是独立于 Activity 的，也就是说当一个 Activity 被 finish 之后，如果你没有主动停止 Thread 或者 Thread 里的 run 方法没有执行完毕的话，Thread 也会一直执行。因此这里会出现一个问题：当 Activity 被 finish 之后，你不再持有该 Thread 的引用。另一方面，你没有办法在不同的 Activity 中对同一 Thread 进行控制。</p>

<h5>Service生命周期</h5>

<ol>
<li>三个阶段：创建-开始-销毁</li>
<li>Oncreate();Service 声明周期的开始，完成Service的初始化工作</li>
<li>OnStartCommand(); 服务声明周期开始，没有对应的停止函数</li>
<li>OnDestory(); 声明周期的结束，释放Service所占用的资源</li>
</ol>


<h5>Service启动方式</h5>

<ol>
<li>Conetext.startService()</li>
<li>Conetext.bindService();</li>
</ol>


<h4>IntentService</h4>

<p>IntentService继承与Service，它最大的特点是对服务请求逐个进行处理。当我们要提供的服务不需要同时处理多个请求的时候，可以选择继承IntentService。</p>

<h5>使用IntentService有几个需要注意的地方：</h5>

<ol>
<li>它不能直接与用户交互，如果想把数据传递给用户界面，需要把值先传递给Activity</li>
<li>一个intentService可以处理多个任务，只不过是一个接着一个的顺序来处理的,后面的任务需要在前一个完成后才能执行</li>
<li>运行在IntetService中的操作是不能被打断的</li>
</ol>


<h6>IntentService的特点</h6>

<ol>
<li><p>它创建了一个独立的工作线程来处理所有的通过onStartCommand()传递给服务的intents。</p></li>
<li><p>创建了一个工作队列，来逐个发送intent给onHandleIntent()。</p></li>
<li><p> 不需要主动调用stopSelft()来结束服务。因为，在所有的intent被处理完后，系统会自动关闭服务。</p></li>
<li><p> 默认实现的onBind()返回null</p></li>
<li><p>默认实现的onStartCommand()的目的是将intent插入到工作队列中。</p></li>
</ol>


<h6>源码分析</h6>

<p>```
java Interservice www.shaojie.name
public abstract class IntentService extends Service {</p>

<pre><code>    private volatile Looper mServiceLooper; 
    private volatile ServiceHandler mServiceHandler; 

    private String mName; 
    private boolean mRedelivery; 


    private final class ServiceHandler extends Handler { 

            public ServiceHandler(Looper looper) { 
                    super(looper); 
            } 

            @Override 
            public void handleMessage(Message msg) { 
                    onHandleIntent((Intent)msg.obj); 
                    stopSelf(msg.arg1); 
            } 

    }
</code></pre>

<p>```
从源码可以分析出:
IntentService 实际上是Looper,Handler,Service 的集合体,他不仅有服务的功能,还有处理和循环消息的功能</p>

<p>```   <br/>
@Override
public void onCreate() {</p>

<pre><code>    super.onCreate(); 

    HandlerThread thread = new HandlerThread("IntentService[" + mName + "]"); 
    thread.start(); 

    mServiceLooper = thread.getLooper(); 
    mServiceHandler = new ServiceHandler(mServiceLooper); 
    }
</code></pre>

<p>```
IntentService创建时就会创建Handler线程(HandlerThread)并且启动,然后再得到当前线程的Looper对象来初始化IntentService的mServiceLooper,接着创建mServicehandler对象.</p>

<p>```
@Override</p>

<pre><code>    public void onStart(Intent intent, int startId) { 
            Message msg = mServiceHandler.obtainMessage(); 
            msg.arg1 = startId; 
            msg.obj = intent; 

            mServiceHandler.sendMessage(msg); 
    }
</code></pre>

<p>```
当你启动IntentService的时候,就会产生一条附带startId和Intent的Message并发送到MessageQueue中,接下来Looper发现MessageQueue中有Message的时候,就会停止Handler处理消息.</p>

<p>```
 @Override</p>

<pre><code>    public void handleMessage(Message msg) { 
                    onHandleIntent((Intent)msg.obj); 
                    stopSelf(msg.arg1); 
    }
</code></pre>

<p>```
接着调用 onHandleIntent((Intent)msg.obj),这是一个抽象的方法,其实就是我们要重写实现的方法,我们可以在这个方法里面处理我们的工作.当任务完成时就会调用stopSelf(msg.arg1)这个方法来结束指定的工作</p>

<p>```
@Override</p>

<pre><code>    public void onDestroy() { 
            mServiceLooper.quit(); 
    }
</code></pre>

<p>```
当所有的工作执行完后:就会执行onDestroy方法,服务结束后调用这个方法 mServiceLooper.quit()使looper停下来.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Asynchronous  AsyncTask]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/18/android-asynchronous-asynctask/"/>
    <updated>2014-03-18T00:03:02+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/18/android-asynchronous-asynctask</id>
    <content type="html"><![CDATA[<h4>AsyncTask介绍</h4>

<p>AsyncTask是Android为我们提供的方便编写异步任务的工具类，可以代替Thread和Handler。但是AsyncTask主要还是用来处理耗时不太长的操作，如果你需要保持一个线程在后台运行很长时间，建议使用java.util.concurrent包下的Executor, ThreadpoolExecutor和FutureTask。
由于AsyncTask是一个抽象类，所以如果我们想使用它，就必须要创建一个子类去继承它。在继承时我们可以为AsyncTask类指定三个泛型参数，这三个参数的用途如下</p>

<ol>
<li>Params
在执行AsyncTask时需要传入的参数，可用于在后台任务中使用。</li>
<li>Progress
后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为进度单位。</li>
<li>Result
当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型。</li>
</ol>


<p>AsyncTask的执行分为四个步骤，每一步都对应一个回调方法，这些方法不应该由应用程序调用，开发者需要做的就是实现这些方法。</p>

<ol>
<li>onPreExecute(), 该方法将在执行实际的后台操作前被UI thread调用。可以在该方法中做一些准备工作，如在界面上显示一个进度条。</li>
<li>doInBackground(Params&hellip;), 将在onPreExecute 方法执行后马上执行，该方法运行在后台线程中。这里将主要负责执行那些很耗时的后台计算工作。可以调用 publishProgress方法来更新实时的任务进度。该方法是抽象方法，子类必须实现。</li>
<li>onProgressUpdate(Progress&hellip;),在publishProgress方法被调用后，UI thread将调用这个方法从而在界面上展示任务的进展情况，例如通过一个进度条进行展示。</li>
<li>onPostExecute(Result), 在doInBackground 执行完成后，onPostExecute 方法将被UI thread调用，后台的计算结果将通过该方法传递到UI thread.</li>
</ol>


<p>为了正确的使用AsyncTask类，以下是几条必须遵守的准则：</p>

<ol>
<li>Task的实例必须在UI thread中创建</li>
<li>execute方法必须在UI thread中调用</li>
<li>不要手动的调用onPreExecute(), onPostExecute(Result)，doInBackground(Params&hellip;), onProgressUpdate(Progress&hellip;)这几个方法</li>
<li>该task只能被执行一次，否则多次调用时将会出现异常 doInBackground方法和onPostExecute的参数必须对应，这两个参数在AsyncTask声明的泛型参数列表中指定，第一个为doInBackground接受的参数，第二个为显示进度的参数，第三个为doInBackground返回和onPostExecute传入的参数。</li>
</ol>


<p>``` java AsyncTaks <a href="http://www.shaojie.name">http://www.shaojie.name</a>
private class DownloadFilesTask extends AsyncTask&lt;URL, Integer, Long> {</p>

<pre><code> protected Long doInBackground(URL... urls) {
     int count = urls.length;
     long totalSize = 0;
     for (int i = 0; i &lt; count; i++) {
         totalSize += Downloader.downloadFile(urls[i]);
         publishProgress((int) ((i / (float) count) * 100));
         // Escape early if cancel() is called
         if (isCancelled()) break;
     }
     return totalSize;
 }

 protected void onProgressUpdate(Integer... progress) {
     setProgressPercent(progress[0]);
 }

 protected void onPostExecute(Long result) {
     showDialog("Downloaded " + result + " bytes");
 }
</code></pre>

<p> }
<code>
执行Task:
</code>
new DownloadFilesTask().execute(url1, url2, url3);
```</p>
]]></content>
  </entry>
  
</feed>
