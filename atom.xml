<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shaojie's Blog]]></title>
  <link href="http://www.shaojie.name/atom.xml" rel="self"/>
  <link href="http://www.shaojie.name/"/>
  <updated>2014-07-21T22:53:41+08:00</updated>
  <id>http://www.shaojie.name/</id>
  <author>
    <name><![CDATA[Shao jie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[不要做一个浮躁的程序员]]></title>
    <link href="http://www.shaojie.name/blog/2014/05/05/cocoapod/"/>
    <updated>2014-05-05T22:57:51+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/05/05/cocoapod</id>
    <content type="html"><![CDATA[<ul>
<li><p>1.不要看到别人的回复第一句话就说：给个代码吧！你应该想想为什么。当你自己想出来再参考别人的提示，你就知道自己和别人思路的差异。</p></li>
<li><p>2.初学者请不要看太多太多的书那会误人子弟的，先找本系统的学，很多人用了很久都是只对部分功能熟悉而已，不系统还是不够的。</p></li>
<li><p>3.看帮助,不要因为很难而自己是初学者所以就不看；帮助永远是最好的参考手册，虽然帮助的文字有时候很难看懂，总觉得不够直观。</p></li>
<li><p>4.不要被对象、属性、方法等词汇所迷惑；最根本的是先了解最基础知识。</p></li>
<li><p>5.不要放过任何一个看上去很简单的小问题–他们往往并不那么简单，或者可以引伸出很多知识点；不会举一反三你就永远学不会。</p></li>
<li><p>6.知道一点东西，并不能说明你会写脚本，脚本是需要经验积累的。</p></li>
<li><p>7.学脚本并不难，JSP、ASP、PHP等等也不过如此–难的是长期坚持实践和不遗余力的博览群书；</p></li>
<li><p>8.看再多的书是学不全脚本的，要多实践。</p></li>
<li><p>9.把时髦的技术挂在嘴边，还不如把过时的技术记在心里；</p></li>
<li><p>10.学习脚本最好的方法之一就是多练习；</p></li>
<li><p>11.在任何时刻都不要认为自己手中的书已经足够了；</p></li>
<li><p>12.看得懂的书，请仔细看；看不懂的书，请硬着头皮看；</p></li>
<li><p>13.别指望看第一遍书就能记住和掌握什么——请看第二遍、第三遍；</p></li>
<li><p>14.请把书上的例子亲手到电脑上实践，即使配套光盘中有源文件；</p></li>
<li><p>15.把在书中看到的有意义的例子扩充；并将其切实的运用到自己的工作中；</p></li>
<li><p>16.不要漏掉书中任何一个练习——请全部做完并记录下思路；</p></li>
<li><p>17.当你用脚本到一半却发现自己用的方法很拙劣时，请不要马上停手；请尽快将余下的部分粗略的完成以保证这个代码的完整性，然后分析自己的错误并重新编写和工作。</p></li>
<li><p>18.别心急，写脚本确实不容易；水平是在不断的实践中完善和发展的；</p></li>
<li><p>19.每学到一个脚本难点的时候，尝试着对别人讲解这个知识点并让他理解—-你能讲清楚才说明你真的理解了；</p></li>
<li><p>20.记录下在和别人交流时发现的自己忽视或不理解的知识点；</p></li>
<li><p>21.保存好你做过的所有的源文件—-那是你最好的积累之一；</p></li>
<li><p>22.对于网络，还是希望大家能多利用一下，很多问题不是非要到论坛来问的，首先你要学会自己找答案，比如google、百度都是很好的搜索引擎，你只要输入关键字就能找到很多相关资料，别老是等待别人给你希望，看的出你平时一定也很懒！</p></li>
<li><p>23.到一个论坛，你学会去看以前的帖子，不要什么都不看就发帖子问，也许你的问题早就有人问过了，你再问，别人已经不想再重复了，做为初学者，谁也不希望自己的帖子没人回的。</p></li>
<li><p>24.虽然不是打击初学者，但是这句话还是要说：论坛论坛，就是大家讨论的地方，如果你总期望有高手总无偿指点你，除非他是你亲戚！！讨论者，起码是 水平相当的才有讨论的说法，如果水平真差距太远了，连基本操作都需要别人给解答，谁还跟你讨论呢。能找到很多相关资料，别老是等待别人给你希望，看的出你 平时一定也很懒！</p></li>
</ul>


<p><p></p>

<pre><code>浮躁的人容易问：我到底该学什么；—-别问，学就对了；   

浮躁的人容易问：JS有钱途吗；—-建议你去抢银行；   

浮躁的人容易说：我要中文版！我英文不行！—-不行？学呀！   

浮躁的人分两种：只观望而不学的人；只学而不坚持的人；   

浮躁的人永远不是一个高手。
</code></pre>

<p>来自互联网，共勉</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoapod]]></title>
    <link href="http://www.shaojie.name/blog/2014/05/05/cocoapod/"/>
    <updated>2014-05-05T22:57:51+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/05/05/cocoapod</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoapods安装和使用]]></title>
    <link href="http://www.shaojie.name/blog/2014/05/05/cocoapods/"/>
    <updated>2014-05-05T22:44:04+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/05/05/cocoapods</id>
    <content type="html"><![CDATA[<h4>CocoaPods是什么</h4>

<p>当你开发iOS应用时，会经常使用到很多第三方开源类库，比如JSONKit，AFNetWorking等等。可能某个类库又用到其他类库，所以要使用它，必须得另外下载其他类库，而其他类库又用到其他类库，“子子孙孙无穷尽也”，这也许是比较特殊的情况。总之小编的意思就是，手动一个个去下载所需类库十分麻烦。另外一种常见情况是，你项目中用到的类库有更新，你必须得重新下载新版本，重新加入到项目中，十分麻烦。如果能有什么工具能解决这些恼人的问题，那将“善莫大焉”。所以，你需要 CocoaPods。</p>

<p>CocoaPods应该是iOS最常用最有名的类库管理工具了，上述两个烦人的问题，通过cocoaPods，只需要一行命令就可以完全解决，当然前提是你必须正确设置它。重要的是，绝大部分有名的开源类库，都支持CocoaPods。所以，作为iOS程序员的我们，掌握CocoaPods的使用是必不可少的基本技能了</p>

<h4>如何下载和安装CocoaPods</h4>

<p>在安装CocoaPods之前，首先要在本地安装好Ruby环境</p>

<p>假如你在本地已经安装好Ruby环境，那么下载和安装CocoaPods将十分简单，只需要一行命令。在Terminator（也就是终端）中输入以下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install cocoapods
</span><span class='line'>pod setup</span></code></pre></td></tr></table></div></figure>


<p>上面第二行执行时，会输出Setting up CocoaPods master repo，但是会等待比较久的时间。这步其实是Cocoapods在将它的信息下载到 ~/.cocoapods目录下，如果你等太久，可以试着cd到那个目录，用du -sh *来查看下载进度</p>

<p>如果你在终端中敲入这个命令之后，会发现半天没有任何反应,可以更新一下ruby的源：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources --remove https://rubygems.org/
</span><span class='line'>gem sources -a http://ruby.taobao.org/
</span><span class='line'>gem sources -l</span></code></pre></td></tr></table></div></figure>


<h4>如何使用CocoaPod</h4>

<ol>
<li>利用CocoaPods，在项目中导入AFNetworking类库
 AFNetworking类库在GitHub地址是：<a href="https://github.com/AFNetworking/AFNetworking">https://github.com/AFNetworking/AFNetworking</a>
为了确定AFNetworking是否支持CocoaPods，可以用CocoaPods的搜索功能验证一下。在终端中输入：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod search AFNetWorking</span></code></pre></td></tr></table></div></figure>


<p>过几秒钟之后，你会在终端中看到关于AFNetworking类库的一些信息</p>

<p>&#8220;
&ndash;> AFNetworking (2.2.1)
   A delightful iOS and OS X networking framework.
   pod &lsquo;AFNetworking&rsquo;, &lsquo;~> 2.2.1&rsquo;
   &ndash; Homepage: <a href="https://github.com/AFNetworking/AFNetworking">https://github.com/AFNetworking/AFNetworking</a>
   &ndash; Source:   <a href="https://github.com/AFNetworking/AFNetworking.git">https://github.com/AFNetworking/AFNetworking.git</a>
   &ndash; Versions: 2.2.1, 2.2.0, 2.1.0, 2.0.3, 2.0.2, 2.0.1, 2.0.0-RC3, 2.0.0-RC2, 2.0.0-RC1, 2.0.0, 1.3.3, 1.3.2, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0RC3, 1.0RC2, 1.0RC1, 1.0.1, 1.0, 0.9.2, 0.9.1, 0.9.0, 0.7.0, 0.5.1, 0.10.1, 0.10.0 [master repo]
   &ndash; Sub specs:</p>

<pre><code> - AFNetworking/Serialization (2.2.1)
 - AFNetworking/Security (2.2.1)
 - AFNetworking/Reachability (2.2.1)
 - AFNetworking/NSURLConnection (2.2.1)
 - AFNetworking/NSURLSession (2.2.1)
 - AFNetworking/UIKit (2.2.1)
</code></pre>

<p>&#8220;
这说明，AFNetworking是支持CocoaPods，所以我们可以利用CocoaPods将AFNetworking导入你的项目中。
先利用Xcode创建一个项目，在项目的目录下新建一个名为Podfile的文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios, '7.0'
</span><span class='line'>pod "AFNetworking", "~&gt; 2.2.0"</span></code></pre></td></tr></table></div></figure>


<p>这两句文字的意思是，当前AFNetworking支持的iOS最高版本是iOS 7.0, 要下载的AFNetworking版本是2.2.0。</p>

<p>这时候，你就可以利用CocoPods下载AFNetworking类库了。还是在终端中的当前项目目录下，运行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install</span></code></pre></td></tr></table></div></figure>


<p>运行完成后，使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件
每次更改了Podfile文件，你需要重新执行一次pod install命令</p>

<h4>.gitignore</h4>

<p>当你执行pod install之后，除了Podfile外，cocoapods还会生成一个名为Podfile.lock的文件，你不应该把这个文件加入到.gitignore中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行pod install 不会更改版本，要pod update才会改Podfile.lock了。这样多人协作的时候，可以防止第三方库升级把程序搞挂</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios sqlite3使用]]></title>
    <link href="http://www.shaojie.name/blog/2014/05/01/ios-sqlite/"/>
    <updated>2014-05-01T00:20:18+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/05/01/ios-sqlite</id>
    <content type="html"><![CDATA[<h5>iOS中使用</h5>

<p>在 iOS 中 sqlite3 库是一套纯 C 的接口，因此很方便地就可以在 obj-c 源码中无痕使用它
首先，需要在Frameworks中加入所需的库Library   libsqlite3.0.dylib</p>

<p>这样可以导入头文件了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>#import "sqlite3.h"
</span><span class='line'>#define kDatabaseName @"city.db"
</span><span class='line'>@interface ViewController (){
</span><span class='line'>      sqlite3 * database;
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<h4>初始化数据库</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(BOOL)initializeDb {
</span><span class='line'>    NSLog(@"initializeDB");
</span><span class='line'>    // look to see if DB is in known location (~/Documents/$DATABASE_FILE_NAME)
</span><span class='line'>    //START:code.DatabaseShoppingList.findDocumentsDirectory
</span><span class='line'>    NSArray *searchPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
</span><span class='line'>    NSString *documentFolderPath = [searchPaths objectAtIndex:0];
</span><span class='line'>    //查看文件目录
</span><span class='line'>    NSLog(@"%@", documentFolderPath);
</span><span class='line'>    self.databaseFilePath = [documentFolderPath stringByAppendingPathComponent:@"city.db"];
</span><span class='line'>    
</span><span class='line'>    if(![[NSFileManager defaultManager] fileExistsAtPath:self.databaseFilePath]){
</span><span class='line'>        //didnit find db, need to copy
</span><span class='line'>        NSString *backupDbPath = [[NSBundle mainBundle] pathForResource:@"city" ofType:@"db"];
</span><span class='line'>        
</span><span class='line'>        if(backupDbPath == nil) {
</span><span class='line'>            //couldn't find backup db to copy
</span><span class='line'>            return NO;
</span><span class='line'>        }else {
</span><span class='line'>            BOOL copiedBackupDb = [[NSFileManager defaultManager] copyItemAtPath:backupDbPath toPath:self.databaseFilePath error:nil];
</span><span class='line'>            if(!copiedBackupDb){
</span><span class='line'>                return NO;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>    }
</span><span class='line'>    return TRUE;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>创建表</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(BOOL) createTable{
</span><span class='line'>    char *sql = "CREATE TABLE city (id integer primary key, cid integer, cityName text)";
</span><span class='line'>    sqlite3_stmt *statment;
</span><span class='line'>    char *errorMsg;
</span><span class='line'>    if(sqlite3_exec(database, sql, NULL, NULL, &errorMsg) != SQLITE_OK){
</span><span class='line'>        NSLog(@"Error: create table failed %s", sqlite3_errmsg(database));
</span><span class='line'>        return NO;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    int success = sqlite3_finalize(statment);
</span><span class='line'>    if(success != SQLITE_DONE){
</span><span class='line'>        NSLog(@"failed to dehydate: %s", sqlite3_errmsg(database));
</span><span class='line'>        return NO;
</span><span class='line'>    }
</span><span class='line'>    return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>向表中插入记录</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(BOOL) insertOne{
</span><span class='line'>    char *errorMsg;
</span><span class='line'>    const char *sql = "insert into city (cid, cityName) values(101, '上海')";
</span><span class='line'>    if(sqlite3_exec(database, sql, NULL, NULL, &errorMsg) == SQLITE_OK){
</span><span class='line'>        NSLog(@"Insert ok");
</span><span class='line'>        return YES;
</span><span class='line'>    }else{
</span><span class='line'>        NSLog(@"error: %s",errorMsg);
</span><span class='line'>        sqlite3_free(errorMsg);
</span><span class='line'>        return  NO;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>查询数据库</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void) showCitys{
</span><span class='line'>    const char * sql = "select * from city";
</span><span class='line'>    sqlite3_stmt *statment;
</span><span class='line'>    if(sqlite3_prepare_v2(database, sql, -1, &statment, nil) == SQLITE_OK) {
</span><span class='line'>        NSLog(@"select ok.");
</span><span class='line'>    }
</span><span class='line'>    while(sqlite3_step(statment) == SQLITE_ROW) {
</span><span class='line'>        int id = sqlite3_column_int(statment, 1);
</span><span class='line'>        //char *name = (char *) sqlite3_column_text(statment, 2);
</span><span class='line'>        //直接用的char类型来中文会有乱码，使用NSString代替
</span><span class='line'>        NSString *name=[[NSString alloc] initWithCString:(char *)sqlite3_column_text(statment , 2) encoding:NSUTF8StringEncoding];
</span><span class='line'>        NSLog(@"row &gt;&gt;id %i, name %@", id, name);
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    sqlite3_finalize(statment);
</span><span class='line'>    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>关闭数据库</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidUnload {   
</span><span class='line'>    
</span><span class='line'>   sqlite3_close(database);   
</span><span class='line'>
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android MVP 模式]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/24/android-mvp/"/>
    <updated>2014-03-24T23:06:01+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/24/android-mvp</id>
    <content type="html"><![CDATA[<h4>MVP模式与MVC模式</h4>

<p>MVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会从直接Model中读取数据而不是通过 Controller
<img src="http://img.hb.aicdn.com/c098e0b36a1be7bb989ca451e2f084d5758eb88b4e76-x3xslP_fw658" alt="" /></p>

<h4>什么是MVC(Model View Presenter)模式</h4>

<ol>
<li>为了使得视图接口可以与模型和控制器进行交互，控制器执行一些初始化事件</li>
<li>用户通过视图（用户接口）执行一些操作</li>
<li>控制器处理用户行为(可以用观察着模式实现)并通知模型进行更新</li>
<li>模型引发一些事件，以便将改变发告知视图</li>
<li>视图处理模型变更的事件，然后显示新的模型数据</li>
<li>用户接口等待用户的进一步操作</li>
</ol>


<h4>Example</h4>

<p>首先，我们先申明View的接口，有2个简单的方法</p>

<figure class='code'><figcaption><span>viewInterface </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">inteface</span> <span class="n">IResultsView</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//set title</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showTitle</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//set result text</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showResults</span><span class="o">(</span><span class="n">String</span> <span class="n">results</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些方法是说明我希望View中视图的变化，这里不关心它怎么发生的</p>

<p>然后再定义一个Presenter的接口</p>

<figure class='code'><figcaption><span>presenterInteface</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IResultsPresenter</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在视图里（Activity/Fragemnt）里onResume()触发的时候，调用Presenter。</p>

<figure class='code'><figcaption><span>presenterInteface</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span> <span class="n">ResultsPreseter</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResultsPresenter</span> <span class="kd">implements</span> <span class="n">IResultsPresenter</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">IResultsView</span> <span class="n">resultsView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ResultsPresenter</span><span class="o">(</span><span class="n">IResultsView</span> <span class="n">resultsView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">resultsView</span> <span class="o">=</span> <span class="n">resultsView</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Get a title</span>
</span><span class='line'>        <span class="n">getTitle</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Get results</span>
</span><span class='line'>        <span class="n">getResults</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里，会触发IResultView里定义的2个函数</p>

<figure class='code'><figcaption><span>presenterInteface</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FragmentResults</span> <span class="kd">extends</span> <span class="n">Fragment</span> <span class="kd">implements</span> <span class="n">IResultsView</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">View</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">TextView</span> <span class="n">title</span><span class="o">,</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">IResultsPresenter</span> <span class="n">presenter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">FragmentResults</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Required empty public constructor</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">View</span> <span class="nf">onCreateView</span><span class="o">(</span><span class="n">LayoutInflater</span> <span class="n">inflater</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">container</span><span class="o">,</span>
</span><span class='line'>                             <span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">view</span> <span class="o">=</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">fragment_results</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onViewCreated</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onViewCreated</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">presenter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResultsPresenter</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">title</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">results_title</span><span class="o">);</span>
</span><span class='line'>        <span class="n">content</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">results_text</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">presenter</span><span class="o">.</span><span class="na">onResume</span><span class="o">(</span><span class="n">getActivity</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showTitle</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">title</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">title</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showResults</span><span class="o">(</span><span class="n">String</span> <span class="n">results</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">content</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">results</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很明显，我们就可以脱离用户接口来测试这些逻辑</p>

<figure class='code'><figcaption><span>presenterInteface</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestResultsPresenter</span> <span class="kd">extends</span> <span class="n">AndroidTestCase</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">IResultsPresenter</span> <span class="n">resultsPresenter</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">resultTitle</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">resultData</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TestResultsPresenter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">setUp</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IResultsView</span> <span class="n">resultsView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestResultsView</span><span class="o">();</span>
</span><span class='line'>        <span class="n">resultsPresenter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ResultsPresenter</span><span class="o">(</span><span class="n">resultsView</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">tearDown</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">tearDown</span><span class="o">();</span>
</span><span class='line'>        <span class="n">resultsPresenter</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testResultFormat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Utilities</span><span class="o">.</span><span class="na">SmsResultManager</span> <span class="n">smsResultManager</span> <span class="o">=</span> <span class="n">Utilities</span><span class="o">.</span><span class="na">SmsResultManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">getContext</span><span class="o">());</span>
</span><span class='line'>        <span class="n">smsResultManager</span><span class="o">.</span><span class="na">removeAllSmsResults</span><span class="o">();</span>
</span><span class='line'>        <span class="n">smsResultManager</span><span class="o">.</span><span class="na">saveResult</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">SmsResult</span><span class="o">(</span><span class="s">&quot;ark&quot;</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Build expected Content</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">expectedContent</span> <span class="o">=</span> <span class="s">&quot;ark\t\tfoo\t\tUnknown\n&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">resultsPresenter</span><span class="o">.</span><span class="na">onResume</span><span class="o">(</span><span class="n">getContext</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expectedContent</span><span class="o">,</span> <span class="n">resultData</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testResultTitle</span><span class="o">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// put something</span>
</span><span class='line'>        <span class="n">Date</span> <span class="n">nowDate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">();</span>
</span><span class='line'>        <span class="n">DateFormat</span> <span class="n">df</span> <span class="o">=</span> <span class="n">DateFormat</span><span class="o">.</span><span class="na">getDateTimeInstance</span><span class="o">(</span>
</span><span class='line'>                <span class="n">DateFormat</span><span class="o">.</span><span class="na">SHORT</span><span class="o">,</span>
</span><span class='line'>                <span class="n">DateFormat</span><span class="o">.</span><span class="na">SHORT</span><span class="o">,</span>
</span><span class='line'>                <span class="n">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Set date time in prefs</span>
</span><span class='line'>        <span class="n">Preferences</span><span class="o">.</span><span class="na">writePreferenceValue</span><span class="o">(</span><span class="n">getContext</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">getContext</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">pref_emergency_date_time_key</span><span class="o">),</span> <span class="n">nowDate</span><span class="o">.</span><span class="na">getTime</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">formattedDateTime</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">nowDate</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">expectedTitle</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">getContext</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">results_title</span><span class="o">),</span>
</span><span class='line'>                <span class="n">formattedDateTime</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Trigger onResume event in Results Presenter</span>
</span><span class='line'>        <span class="n">resultsPresenter</span><span class="o">.</span><span class="na">onResume</span><span class="o">(</span><span class="n">getContext</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Test not null</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">resultTitle</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Test as expected</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expectedTitle</span><span class="o">,</span> <span class="n">resultTitle</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">TestResultsView</span> <span class="kd">implements</span> <span class="n">IResultsView</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showTitle</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">resultTitle</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showResults</span><span class="o">(</span><span class="n">String</span> <span class="n">results</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">resultData</span> <span class="o">=</span> <span class="n">results</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十四个很准的心里暗示]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/24/4/"/>
    <updated>2014-03-24T23:05:55+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/24/4</id>
    <content type="html"><![CDATA[<p>1、当你对某件事情抱着百分之一万的相信，它最后就会变成事实。</p>

<p>2、期望定律 期望定律告诉我们，当我们怀着对某件事情非常强烈期望的时候，我们所期望的事物就会出现。</p>

<p>3、情绪定律 情绪定律告诉我们，人百分之百是情绪化的。即使有人说某人很理性，其实当这个人很有&#8221;理性&#8221;地思考问题的时候，也是受到他当时情绪状态的影响，&#8221;理性地思考&#8221;本身也是一种情绪状态。所以人百分之百是情绪化的动物，而且任何时候的决定都是情绪化的决定。</p>

<p>4、因果定律 任何事情的发生，都有其必然的原因。有因才有果。换句话说，当你看到任何现象的时候，你不用觉得不可理解或者奇怪，因为任何事情的发生都必有其原因。你今天的现状结果是你过去种下的因导致的结果。</p>

<p>5、吸引定律 当你的思想专注在某一领域的时候，跟这个领域相关的人、事、物就会被你吸引而来。</p>

<p> 6、重复定律 任何的行为和思维，只要你不断的重复就会得到不断的加强。在你的潜意识当中，只要你能够不断地重复一些人、事、物，它们都会在潜意识里变成事实。</p>

<p> 7、累积定律 很多年轻人都曾梦想做一番大事业，其实天下并没有什么大事可做，有的只是小事。一件一件小事累积起来就形成了大事。任何大成就或者大灾难都是累积的结果。</p>

<p>8、辐射定律 当你做一件事情的时候，影响的并不只是这件事情的本身，它还会辐射到相关的其他领域。任何事情都有辐射作用。</p>

<p>9、相关定律 相关定律告诉我们：这个世界上的每一件事情之间都有一定的联系，没有一件事情是完全独立的。要解决某个难题最好从其他相关的某个地方人手，而不只是专注在一个困难点上。</p>

<p> 10、专精定律 专精定律告诉我们，只有专精在一个领域，这个领域才能有所发展。所以无论你做任何的行业都要把做该行业的最顶尖为目标，只有当你能够专精的时候，你所做的领域才会出类拔萃地成长。</p>

<p> 11、替换定律 替换定律就是说，当我们有一项不想要的记忆或者是负面的习惯，我们是无法完全去除掉，只能用一种新的记忆或新的习惯去替换他。</p>

<p> 12、惯性定律 任何事情只要你能够持续不断去加强它，它终究会变成一种习惯。</p>

<p>13、显现定律 显现定律就是说，当我们持续寻找、追问答案的时候，它们最终都必将显现。</p>

<p> 14、需求定律 任何人做任何事情都是带有一种需求。尊重并满足对方的需求，别人才会尊重我们的需求</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handy adb commands for Android]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/24/adb-commands-for-android/"/>
    <updated>2014-03-24T23:05:52+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/24/adb-commands-for-android</id>
    <content type="html"><![CDATA[<h4>查看连接的设备</h4>

<p>使用这个命令查看当前连接的所有设备和它们的ID</p>

<p><code>adb devices</code></p>

<p>如果你有多个设备连接，使用<code>adb -s DEVICE_ID</code>选中你需要操作的设备</p>

<h4>安装应用</h4>

<p>使用<code>install</code>命令安装apk，如果你已经安装过当前程序，并且想保存当前的数据，可以加上&#8220;-r&#8220;`参数来覆盖安装当前程序</p>

<p><code>
adb
</code>
记录下在使用android adb操作时常用的命令，可以方便我们在开发过程中构建和测试程序。</p>

<h4>卸载程序</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb uninstall PACKAGE_NAME
</span><span class='line'>//example
</span><span class='line'>adb uninstall com.shaojie.name.example</span></code></pre></td></tr></table></div></figure>


<h4>启动一个Activity</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb shell am start PACKAGE_NAME/ACTIVITY_IN_PACKAGE
</span><span class='line'>adb shell am start PACKAGE_NAME/FULLY_QUALIFIED_ACTIVITY
</span><span class='line'>//example
</span><span class='line'>adb shell am start -n com.shaojie.name.example/.MainActiivty
</span><span class='line'>adb shell am start -n com.shaojie.name.example/com.shaojie.name.MainActivity</span></code></pre></td></tr></table></div></figure>


<h4>进入设备的shell</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb shell</span></code></pre></td></tr></table></div></figure>


<h4>截屏</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb shell screencap -p | perl -pe 's/\x0D\x0A/\x0A/g' &gt; screen.png</span></code></pre></td></tr></table></div></figure>


<h4>点击电源键</h4>

<p>这个命令发送一个关闭屏幕的事件到设备</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb shell input keyevent 26</span></code></pre></td></tr></table></div></figure>


<h4>屏幕解锁</h4>

<p>与上面的命令作用相反，用于点亮屏幕解锁</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb shell input keyevent 82</span></code></pre></td></tr></table></div></figure>


<h4>显示安装的程序包</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb shell pm list packages -f</span></code></pre></td></tr></table></div></figure>


<h4>Logging</h4>

<p>显示系统的日志到命令行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb logcat</span></code></pre></td></tr></table></div></figure>


<h4>TagName过滤</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb logcat -s TAG_NAME
</span><span class='line'>adb logcat -s TAG_NAME_1 TAG_NAME_2
</span><span class='line'>//
</span><span class='line'>adb logcat -s TEST
</span><span class='line'>adb logcat -s TEST MYAPP</span></code></pre></td></tr></table></div></figure>


<h4>优先级过滤</h4>

<p>显示某个级别以及以上优先级的日志</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb logcat "*:PRIORITY"
</span><span class='line'>//example
</span><span class='line'>adb logcat "*:W"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>V-Verbose</li>
<li>D_Debug</li>
<li>I-Info</li>
<li>W-Warning</li>
<li>E-Error</li>
<li>F-Fatal</li>
<li>S-Silent(最高级别)</li>
</ul>


<h4>优先级和tagname过滤</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb logcat -s TAG_NAME:PRIORITY
</span><span class='line'>adb logcat -s TAG_NAME_1:PRIORITY TAG_NAME_2:PROPRITY
</span><span class='line'>//example
</span><span class='line'>adb logcat -s TEST: W</span></code></pre></td></tr></table></div></figure>


<h4>grep过滤</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb logcat | grep "SEARCH_TERM"
</span><span class='line'>adb logcat | grep "SEARCH_TERM_1\|SEARCH_TERM_2"
</span><span class='line'>//example
</span><span class='line'>adb logcat | grep "Exception"
</span><span class='line'>adb logcat | grep "Exveption\|Error"</span></code></pre></td></tr></table></div></figure>


<h4>清除logcat日志</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb logcat -c</span></code></pre></td></tr></table></div></figure>


<h4>更多</h4>

<p>更加细节，当然是官方文档，<a href="http://developer.android.com/tools/help/adb.html">传送门</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Asynchronous Loader]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/24/android-asynchronous-Loader/"/>
    <updated>2014-03-24T23:05:43+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/24/android-asynchronous-Loader</id>
    <content type="html"><![CDATA[<h4>Loader概述</h4>

<p>装载器从android3.0开始引进。它使得在activity或fragment中异步加载数据变得简单。装载器具有如下特性:</p>

<ul>
<li>它们对每个Activity和Fragment都有效</li>
<li>他们提供了异步加载数据的能力</li>
<li>它们监听数据，并在数数据发生变化时传递新的结果</li>
<li>当由于配置改变而被重新创建后，它们自动重连到上一个加载器的游标，所以不必重新查询数据</li>
</ul>


<h5>API概述</h5>

<h6>LoaderManager</h6>

<p>一个抽像类，关联到一个Activity或Fragment，管理一个或多个装载器的实例。这帮助一个应用管理那些与Activity或Fragment的生命周期相关的长时间运行的的操作。最常见的方式是与一个CursorLoader一起使用，然而应用是可以随便写它们自己的装载器以加载其它类型的数据。
每个activity或fragment只有一个LoaderManager。但是一个LoaderManager可以拥有多个装载器。</p>

<h6>LoadManager.LoaderCallbacks</h6>

<p>一个用于客户端与LoaderManager交互的回调接口。例如，你使用回调方法onCreateLoader()来创建一个新的装载器。</p>

<h6>Loader</h6>

<p>一个执行异步数据加载的抽象类。它是加载器的基类。你可以使用典型的CursorLoader，但是你也可以实现你自己的子类。一旦装载器被激活，它们将监视它们的数据源并且在数据改变时发送新的结果。</p>

<h6>AsyncTaskLoader</h6>

<p>提供一个AsyncTask来执行异步加载工作的抽象类。</p>

<h6>CursorLoader</h6>

<p>AsyncTaskLoader的子类，它查询ContentResolver然后返回一个Cursor。这个类为查询cursor以标准的方式实现了装载器的协议，它的游标查询是通过AsyncTaskLoader在后台线程中执行，从而不会阻塞界面。使用这个装载器是从一个ContentProvider异步加载数据的最好方式。相比之下，通过fragment或activity的API来执行一个被管理的查询就不行了</p>

<h5>使用</h5>

<p>一个使用装载器的应用会包含如下组件：</p>

<ul>
<li>一个Activity或Fragment</li>
<li>一个LoaderManager的实例</li>
<li>一个加载被ContentProvider所支持的数据的CursorLoader．或者，你可以从Loader或AsyncTaskLoader实现你自己的装载器来从其它源加载数据</li>
<li>一个LoaderManager.LoaderCallbacks的实现．这是你创建新的装载器以及管理你的已有装载器的引用的地方</li>
<li>一个显示装载器的数据的途径，例如使用一个SimpleCursorAdapter</li>
<li>一个数据源，比如当是用CursorLoader时，它将是一个ContentProvider</li>
</ul>


<h5>启动一个装载器</h5>

<p>LoaderManager管理一个Activiry或Fragment中的一个或多个装载器．但每个activity或fragment只拥有一个LoaderManager．</p>

<p>你通常要在activity的onCreate()方法中或fragment的onActivityCreated()方法中初始化一个装载器．你可以如下创建：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getLoaderManager().initLoader(0,null, this);  </span></code></pre></td></tr></table></div></figure>


<p>initLoader()方法有一下参数</p>

<ul>
<li>一个唯一ID来标志装载器．在这个例子中，ID是0</li>
<li>可选的参数，用于装载器初始化时(本例中是null)</li>
<li>一个LoaderManager.LoaderCallbacks的实现．被LoaderManager调用以报告装载器的事件，在这个例子中，类本实现了这个接口，所以传的是它自己：this</li>
</ul>


<p>initLoader()保证一个装载器被初始化并激活．它具有两种可能的结果：</p>

<ul>
<li>如果ID所指的装载器已经存在，那么这个装载器将被重用</li>
<li>如果装载器不存在，initLoader()就触发LoaderManager.LoaderCallbacks的方法onCreateLoader()．这是你实例化并返回一个新装载器的地方</li>
</ul>


<p>在这两种情况中，传入的LoaderManager.LoaderCallbacks的实现都与装载器绑定在一起．并且会在装载器状态变化时被调用．如果在调用这个方法时，调用者正处于启动状态，并且所请求的装载器已存在并产生了数据，那么系统会马上调用onLoadFinished()(也就是说在initLoader()还在执行时)．所以你必须为这种情况的发生做好准备.</p>

<h5>重启装载器</h5>

<p>当你使用initLoader()时，如果指定ID的装载器已经存在，则它使用这个装载器．如果不存在呢，它将创建一个新的．但是有时你却是想丢弃旧的然后开始新的数据．</p>

<p>要想丢弃旧数据，你应使用restartLoader()。</p>

<h5>回调</h5>

<p>LoaderManager.LoaderCallbacks是一个回调接口，它使得客户端可以与LoaderManager进行交互．</p>

<p>装载器，一般指的是CursorLoader，我们希望在它停止后依然保持数据．这使得应用可以在activity或fragment的 onStop() 和onStart() 之间保持数据，所以当用户回到一个应用时，它们不需等待数据加载．你使用LoaderManager.LoaderCallbacks 的方法们，在需要时创建新的装载器，并且告诉应用什么时候要停止使用装载器的数据．</p>

<p>LoaderManager.LoaderCallbacks 包含以下方法们:</p>

<ul>
<li>onCreateLoader() —跟据传入的ID，初始化并返回一个新的装载器．</li>
<li>onLoadFinished() —当一个装载器完成了它的装载过程后被调用</li>
<li>onLoaderReset() —当一个装载器被重置而什其数据无效时被调用</li>
</ul>


<figure class='code'><figcaption><span>Loader www.shaojie.name</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">CursorLoaderListFragment</span> <span class="kd">extends</span> <span class="n">ListFragment</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">OnQueryTextListener</span><span class="o">,</span> <span class="n">LoaderManager</span><span class="o">.</span><span class="na">LoaderCallbacks</span><span class="o">&lt;</span><span class="n">Cursor</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This is the Adapter being used to display the list&#39;s data.</span>
</span><span class='line'>    <span class="n">SimpleCursorAdapter</span> <span class="n">mAdapter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If non-null, this is the current filter the user has provided.</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">mCurFilter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">onActivityCreated</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onActivityCreated</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Give some text to display if there is no data.  In a real</span>
</span><span class='line'>        <span class="c1">// application this would come from a resource.</span>
</span><span class='line'>        <span class="n">setEmptyText</span><span class="o">(</span><span class="s">&quot;No phone numbers&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// We have a menu item to show in action bar.</span>
</span><span class='line'>        <span class="n">setHasOptionsMenu</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Create an empty adapter we will use to display the loaded data.</span>
</span><span class='line'>        <span class="n">mAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleCursorAdapter</span><span class="o">(</span><span class="n">getActivity</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">simple_list_item_2</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="n">Contacts</span><span class="o">.</span><span class="na">DISPLAY_NAME</span><span class="o">,</span> <span class="n">Contacts</span><span class="o">.</span><span class="na">CONTACT_STATUS</span> <span class="o">},</span>
</span><span class='line'>                <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">text1</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">text2</span> <span class="o">},</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setListAdapter</span><span class="o">(</span><span class="n">mAdapter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Prepare the loader.  Either re-connect with an existing one,</span>
</span><span class='line'>        <span class="c1">// or start a new one.</span>
</span><span class='line'>        <span class="n">getLoaderManager</span><span class="o">().</span><span class="na">initLoader</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">onCreateOptionsMenu</span><span class="o">(</span><span class="n">Menu</span> <span class="n">menu</span><span class="o">,</span> <span class="n">MenuInflater</span> <span class="n">inflater</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Place an action bar item for searching.</span>
</span><span class='line'>        <span class="n">MenuItem</span> <span class="n">item</span> <span class="o">=</span> <span class="n">menu</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Search&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">item</span><span class="o">.</span><span class="na">setIcon</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">ic_menu_search</span><span class="o">);</span>
</span><span class='line'>        <span class="n">item</span><span class="o">.</span><span class="na">setShowAsAction</span><span class="o">(</span><span class="n">MenuItem</span><span class="o">.</span><span class="na">SHOW_AS_ACTION_IF_ROOM</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SearchView</span> <span class="n">sv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SearchView</span><span class="o">(</span><span class="n">getActivity</span><span class="o">());</span>
</span><span class='line'>        <span class="n">sv</span><span class="o">.</span><span class="na">setOnQueryTextListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">item</span><span class="o">.</span><span class="na">setActionView</span><span class="o">(</span><span class="n">sv</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onQueryTextChange</span><span class="o">(</span><span class="n">String</span> <span class="n">newText</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Called when the action bar search text has changed.  Update</span>
</span><span class='line'>        <span class="c1">// the search filter, and restart the loader to do a new query</span>
</span><span class='line'>        <span class="c1">// with this filter.</span>
</span><span class='line'>        <span class="n">mCurFilter</span> <span class="o">=</span> <span class="o">!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">newText</span><span class="o">)</span> <span class="o">?</span> <span class="n">newText</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">getLoaderManager</span><span class="o">().</span><span class="na">restartLoader</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">onQueryTextSubmit</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Don&#39;t care about this.</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">onListItemClick</span><span class="o">(</span><span class="n">ListView</span> <span class="n">l</span><span class="o">,</span> <span class="n">View</span> <span class="n">v</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Insert desired behavior here.</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;FragmentComplexList&quot;</span><span class="o">,</span> <span class="s">&quot;Item clicked: &quot;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// These are the Contacts rows that we will retrieve.</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">CONTACTS_SUMMARY_PROJECTION</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Contacts</span><span class="o">.</span><span class="na">_ID</span><span class="o">,</span>
</span><span class='line'>        <span class="n">Contacts</span><span class="o">.</span><span class="na">DISPLAY_NAME</span><span class="o">,</span>
</span><span class='line'>        <span class="n">Contacts</span><span class="o">.</span><span class="na">CONTACT_STATUS</span><span class="o">,</span>
</span><span class='line'>        <span class="n">Contacts</span><span class="o">.</span><span class="na">CONTACT_PRESENCE</span><span class="o">,</span>
</span><span class='line'>        <span class="n">Contacts</span><span class="o">.</span><span class="na">PHOTO_ID</span><span class="o">,</span>
</span><span class='line'>        <span class="n">Contacts</span><span class="o">.</span><span class="na">LOOKUP_KEY</span><span class="o">,</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Loader</span><span class="o">&lt;</span><span class="n">Cursor</span><span class="o">&gt;</span> <span class="nf">onCreateLoader</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">Bundle</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// This is called when a new Loader needs to be created.  This</span>
</span><span class='line'>        <span class="c1">// sample only has one Loader, so we don&#39;t care about the ID.</span>
</span><span class='line'>        <span class="c1">// First, pick the base URI to use depending on whether we are</span>
</span><span class='line'>        <span class="c1">// currently filtering.</span>
</span><span class='line'>        <span class="n">Uri</span> <span class="n">baseUri</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mCurFilter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">baseUri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">withAppendedPath</span><span class="o">(</span><span class="n">Contacts</span><span class="o">.</span><span class="na">CONTENT_FILTER_URI</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">Uri</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">mCurFilter</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">baseUri</span> <span class="o">=</span> <span class="n">Contacts</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Now create and return a CursorLoader that will take care of</span>
</span><span class='line'>        <span class="c1">// creating a Cursor for the data being displayed.</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">select</span> <span class="o">=</span> <span class="s">&quot;((&quot;</span> <span class="o">+</span> <span class="n">Contacts</span><span class="o">.</span><span class="na">DISPLAY_NAME</span> <span class="o">+</span> <span class="s">&quot; NOTNULL) AND (&quot;</span>
</span><span class='line'>                <span class="o">+</span> <span class="n">Contacts</span><span class="o">.</span><span class="na">HAS_PHONE_NUMBER</span> <span class="o">+</span> <span class="s">&quot;=1) AND (&quot;</span>
</span><span class='line'>                <span class="o">+</span> <span class="n">Contacts</span><span class="o">.</span><span class="na">DISPLAY_NAME</span> <span class="o">+</span> <span class="s">&quot; != &#39;&#39; ))&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">CursorLoader</span><span class="o">(</span><span class="n">getActivity</span><span class="o">(),</span> <span class="n">baseUri</span><span class="o">,</span>
</span><span class='line'>                <span class="n">CONTACTS_SUMMARY_PROJECTION</span><span class="o">,</span> <span class="n">select</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                <span class="n">Contacts</span><span class="o">.</span><span class="na">DISPLAY_NAME</span> <span class="o">+</span> <span class="s">&quot; COLLATE LOCALIZED ASC&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoadFinished</span><span class="o">(</span><span class="n">Loader</span><span class="o">&lt;</span><span class="n">Cursor</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">,</span> <span class="n">Cursor</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Swap the new cursor in.  (The framework will take care of closing the</span>
</span><span class='line'>        <span class="c1">// old cursor once we return.)</span>
</span><span class='line'>        <span class="n">mAdapter</span><span class="o">.</span><span class="na">swapCursor</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoaderReset</span><span class="o">(</span><span class="n">Loader</span><span class="o">&lt;</span><span class="n">Cursor</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// This is called when the last Cursor provided to onLoadFinished()</span>
</span><span class='line'>        <span class="c1">// above is about to be closed.  We need to make sure we are no</span>
</span><span class='line'>        <span class="c1">// longer using it.</span>
</span><span class='line'>        <span class="n">mAdapter</span><span class="o">.</span><span class="na">swapCursor</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Loader的使用分一下几个步骤：</p>

<ul>
<li>实现自己的异步Loader ,如本篇的AsyncTaskLoader或者CursorLoader或者自己继承Loader，第二步需要用到这个Loader</li>
<li>创建数据源 XXXAdapter.</li>
<li>在Activity 或者Fragments 上实现OnQueryTextListener,LoaderManager.LoaderCallbacks接口</li>
<li>在onCreateLoader里面返回Loader，在onLoadfinished里面做清除动作，在onQueryTextChange或者onQueryTextSubmit改变数据源，在onCreate里面让Loader去执行请求数据getLoaderManager().initLoader(0, null, this)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Asynchrous IntentService]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/24/android-asynchronous-IntentService/"/>
    <updated>2014-03-24T23:05:38+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/24/android-asynchronous-IntentService</id>
    <content type="html"><![CDATA[<h4>Service</h4>

<h6>Service种类</h6>

<table>
<thead>
<tr>
<th></th>
<th>类别 </th>
<th> 区别  </th>
<th>  优点   </th>
<th>缺点   </th>
<th>应用   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 本地服务（Local)  </td>
<td> 该服务依附在主进程上  </td>
<td> 服务依附在主进程上而不是独立的进程，这样在一定程度上节约了资源，另外Local服务因为是在同一进程因此不需要IPC，也不需要AIDL。相应bindService会方便很多。  </td>
<td> 主进程被Kill后，服务便会终止</td>
<td>非常常见的应用如：音乐播放服务，Push服务。  |   </td>
</tr>
<tr>
<td></td>
<td> 远程服务（Remote）  </td>
<td> 该服务是独立的进程  </td>
<td> 服务为独立的进程，对应进程名格式为所在包名加上你指定的android:process字符串。由于是独立的进程，因此在Activity所在进程被Kill的时候，该服务依然在运行，不受其他进程影响，有利于为多个进程提供服务具有较高的灵活性  </td>
<td> 该服务是独立的进程，会占用一定资源，并且使用AIDL进行IPC稍微麻烦一点</td>
<td> 一些提供系统服务的Service，这种Service是常驻的  |   </td>
</tr>
</tbody>
</table>


<h5>service运行分类</h5>

<table>
<thead>
<tr>
<th></th>
<th>类别 </th>
<th> 区别 </th>
<th>应用</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>前台服务</td>
<td>会在通知一栏显示 ONGOING 的 Notification</td>
<td>当服务被终止的时候，通知一栏的 Notification 也会消失，这样对于用户有一定的通知作用。常见的如音乐播放服务|</td>
</tr>
<tr>
<td></td>
<td>后台服务</td>
<td>默认的服务即为后台服务，即不会在通知一栏显示 ONGOING 的 Notification</td>
<td>当服务被终止的时候，用户是看不到效果的。某些不需要运行或终止提示的服务，如天气更新，日期同步，邮件同步等|</td>
</tr>
</tbody>
</table>


<h5>Service 与 Thread的区别</h5>

<ol>
<li>Thread：Thread是程序执行的最小单元，它是分配CPU的基本单位。可以用 Thread 来执行一些异步的操作。</li>
<li>Service：Service 是Android的一种机制，当它运行的时候如果是Local Service，那么对应的 Service 是运行在主进程的 main 线程上的。如：onCreate，onStart 这些函数在被系统调用的时候都是在主进程的 main 线程上运行的。如果是Remote Service，那么对应的 Service 则是运行在独立进程的 main 线程上。</li>
</ol>


<p>那么我们为什么要用 Service 呢？其实这跟 android 的系统机制有关，我们先拿 Thread 来说。Thread 的运行是独立于 Activity 的，也就是说当一个 Activity 被 finish 之后，如果你没有主动停止 Thread 或者 Thread 里的 run 方法没有执行完毕的话，Thread 也会一直执行。因此这里会出现一个问题：当 Activity 被 finish 之后，你不再持有该 Thread 的引用。另一方面，你没有办法在不同的 Activity 中对同一 Thread 进行控制。</p>

<h5>Service生命周期</h5>

<ol>
<li>三个阶段：创建-开始-销毁</li>
<li>Oncreate();Service 声明周期的开始，完成Service的初始化工作</li>
<li>OnStartCommand(); 服务声明周期开始，没有对应的停止函数</li>
<li>OnDestory(); 声明周期的结束，释放Service所占用的资源</li>
</ol>


<h5>Service启动方式</h5>

<ol>
<li>Conetext.startService()</li>
<li>Conetext.bindService();</li>
</ol>


<h4>IntentService</h4>

<p>IntentService继承与Service，它最大的特点是对服务请求逐个进行处理。当我们要提供的服务不需要同时处理多个请求的时候，可以选择继承IntentService。</p>

<h5>使用IntentService有几个需要注意的地方：</h5>

<ol>
<li>它不能直接与用户交互，如果想把数据传递给用户界面，需要把值先传递给Activity</li>
<li>一个intentService可以处理多个任务，只不过是一个接着一个的顺序来处理的,后面的任务需要在前一个完成后才能执行</li>
<li>运行在IntetService中的操作是不能被打断的</li>
</ol>


<h6>IntentService的特点</h6>

<ol>
<li><p>它创建了一个独立的工作线程来处理所有的通过onStartCommand()传递给服务的intents。</p></li>
<li><p>创建了一个工作队列，来逐个发送intent给onHandleIntent()。</p></li>
<li><p> 不需要主动调用stopSelft()来结束服务。因为，在所有的intent被处理完后，系统会自动关闭服务。</p></li>
<li><p> 默认实现的onBind()返回null</p></li>
<li><p>默认实现的onStartCommand()的目的是将intent插入到工作队列中。</p></li>
</ol>


<h6>源码分析</h6>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java Interservice www.shaojie.name
</span><span class='line'>public abstract class IntentService extends Service { 
</span><span class='line'>
</span><span class='line'>        private volatile Looper mServiceLooper; 
</span><span class='line'>        private volatile ServiceHandler mServiceHandler; 
</span><span class='line'>
</span><span class='line'>        private String mName; 
</span><span class='line'>        private boolean mRedelivery; 
</span><span class='line'>    
</span><span class='line'>
</span><span class='line'>        private final class ServiceHandler extends Handler { 
</span><span class='line'>
</span><span class='line'>                public ServiceHandler(Looper looper) { 
</span><span class='line'>                        super(looper); 
</span><span class='line'>                } 
</span><span class='line'>    
</span><span class='line'>                @Override 
</span><span class='line'>                public void handleMessage(Message msg) { 
</span><span class='line'>                        onHandleIntent((Intent)msg.obj); 
</span><span class='line'>                        stopSelf(msg.arg1); 
</span><span class='line'>                } 
</span><span class='line'>
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>从源码可以分析出:
IntentService 实际上是Looper,Handler,Service 的集合体,他不仅有服务的功能,还有处理和循环消息的功能</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override 
</span><span class='line'>public void onCreate() { 
</span><span class='line'>        super.onCreate(); 
</span><span class='line'>
</span><span class='line'>        HandlerThread thread = new HandlerThread("IntentService[" + mName + "]"); 
</span><span class='line'>        thread.start(); 
</span><span class='line'>
</span><span class='line'>        mServiceLooper = thread.getLooper(); 
</span><span class='line'>        mServiceHandler = new ServiceHandler(mServiceLooper); 
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>IntentService创建时就会创建Handler线程(HandlerThread)并且启动,然后再得到当前线程的Looper对象来初始化IntentService的mServiceLooper,接着创建mServicehandler对象.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override 
</span><span class='line'>        public void onStart(Intent intent, int startId) { 
</span><span class='line'>                Message msg = mServiceHandler.obtainMessage(); 
</span><span class='line'>                msg.arg1 = startId; 
</span><span class='line'>                msg.obj = intent; 
</span><span class='line'>
</span><span class='line'>                mServiceHandler.sendMessage(msg); 
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>当你启动IntentService的时候,就会产生一条附带startId和Intent的Message并发送到MessageQueue中,接下来Looper发现MessageQueue中有Message的时候,就会停止Handler处理消息.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> @Override 
</span><span class='line'>        public void handleMessage(Message msg) { 
</span><span class='line'>                        onHandleIntent((Intent)msg.obj); 
</span><span class='line'>                        stopSelf(msg.arg1); 
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>接着调用 onHandleIntent((Intent)msg.obj),这是一个抽象的方法,其实就是我们要重写实现的方法,我们可以在这个方法里面处理我们的工作.当任务完成时就会调用stopSelf(msg.arg1)这个方法来结束指定的工作</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override 
</span><span class='line'>        public void onDestroy() { 
</span><span class='line'>                mServiceLooper.quit(); 
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>当所有的工作执行完后:就会执行onDestroy方法,服务结束后调用这个方法 mServiceLooper.quit()使looper停下来.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Asynchronous  AsyncTask]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/18/android-asynchronous-asynctask/"/>
    <updated>2014-03-18T00:03:02+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/18/android-asynchronous-asynctask</id>
    <content type="html"><![CDATA[<h4>AsyncTask介绍</h4>

<p>AsyncTask是Android为我们提供的方便编写异步任务的工具类，可以代替Thread和Handler。但是AsyncTask主要还是用来处理耗时不太长的操作，如果你需要保持一个线程在后台运行很长时间，建议使用java.util.concurrent包下的Executor, ThreadpoolExecutor和FutureTask。
由于AsyncTask是一个抽象类，所以如果我们想使用它，就必须要创建一个子类去继承它。在继承时我们可以为AsyncTask类指定三个泛型参数，这三个参数的用途如下</p>

<ol>
<li>Params
在执行AsyncTask时需要传入的参数，可用于在后台任务中使用。</li>
<li>Progress
后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为进度单位。</li>
<li>Result
当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型。</li>
</ol>


<p>AsyncTask的执行分为四个步骤，每一步都对应一个回调方法，这些方法不应该由应用程序调用，开发者需要做的就是实现这些方法。</p>

<ol>
<li>onPreExecute(), 该方法将在执行实际的后台操作前被UI thread调用。可以在该方法中做一些准备工作，如在界面上显示一个进度条。</li>
<li>doInBackground(Params&hellip;), 将在onPreExecute 方法执行后马上执行，该方法运行在后台线程中。这里将主要负责执行那些很耗时的后台计算工作。可以调用 publishProgress方法来更新实时的任务进度。该方法是抽象方法，子类必须实现。</li>
<li>onProgressUpdate(Progress&hellip;),在publishProgress方法被调用后，UI thread将调用这个方法从而在界面上展示任务的进展情况，例如通过一个进度条进行展示。</li>
<li>onPostExecute(Result), 在doInBackground 执行完成后，onPostExecute 方法将被UI thread调用，后台的计算结果将通过该方法传递到UI thread.</li>
</ol>


<p>为了正确的使用AsyncTask类，以下是几条必须遵守的准则：</p>

<ol>
<li>Task的实例必须在UI thread中创建</li>
<li>execute方法必须在UI thread中调用</li>
<li>不要手动的调用onPreExecute(), onPostExecute(Result)，doInBackground(Params&hellip;), onProgressUpdate(Progress&hellip;)这几个方法</li>
<li>该task只能被执行一次，否则多次调用时将会出现异常 doInBackground方法和onPostExecute的参数必须对应，这两个参数在AsyncTask声明的泛型参数列表中指定，第一个为doInBackground接受的参数，第二个为显示进度的参数，第三个为doInBackground返回和onPostExecute传入的参数。</li>
</ol>


<figure class='code'><figcaption><span>AsyncTaks</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">DownloadFilesTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">URL</span><span class="o">,</span> <span class="n">Integer</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="kd">protected</span> <span class="n">Long</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">URL</span><span class="o">...</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">urls</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>         <span class="kt">long</span> <span class="n">totalSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>         <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>             <span class="n">totalSize</span> <span class="o">+=</span> <span class="n">Downloader</span><span class="o">.</span><span class="na">downloadFile</span><span class="o">(</span><span class="n">urls</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>             <span class="n">publishProgress</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">((</span><span class="n">i</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">count</span><span class="o">)</span> <span class="o">*</span> <span class="mi">100</span><span class="o">));</span>
</span><span class='line'>             <span class="c1">// Escape early if cancel() is called</span>
</span><span class='line'>             <span class="k">if</span> <span class="o">(</span><span class="n">isCancelled</span><span class="o">())</span> <span class="k">break</span><span class="o">;</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">totalSize</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onProgressUpdate</span><span class="o">(</span><span class="n">Integer</span><span class="o">...</span> <span class="n">progress</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">setProgressPercent</span><span class="o">(</span><span class="n">progress</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">Long</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">showDialog</span><span class="o">(</span><span class="s">&quot;Downloaded &quot;</span> <span class="o">+</span> <span class="n">result</span> <span class="o">+</span> <span class="s">&quot; bytes&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行Task:</p>

<figure class='code'><figcaption><span>AsyncTaks</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">DownloadFilesTask</span><span class="o">().</span><span class="na">execute</span><span class="o">(</span><span class="n">url1</span><span class="o">,</span> <span class="n">url2</span><span class="o">,</span> <span class="n">url3</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Asynchronous HandlerThread]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/17/android-asynchronous-handlerthread/"/>
    <updated>2014-03-17T23:06:29+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/17/android-asynchronous-handlerthread</id>
    <content type="html"><![CDATA[<h4>Looper</h4>

<p>Looper是用于给一个线程添加一个消息队列(MessageQueue)，并且循环等待，当有消息时会唤起线程来处理消息的一个工具，直到线程结束为止。通常情况下不会用到Looper，因为对于Activity，Service等系统组件，Frameworks已经为我们初始化好了线程(俗称的UI线程或主线程)，在其内含有一个Looper，和由Looper创建的消息队列，所以主线程会一直运行，处理用户事件，直到某些事件(BACK）退出。
如果，我们需要新建一个线程，并且这个线程要能够循环处理其他线程发来的消息事件，或者需要长期与其他线程进行复杂的交互，这时就需要用到Looper来给线程建立消息队列.</p>

<h5>使用Looper:</h5>

<figure class='code'><figcaption><span>Looper</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">class</span> <span class="nc">LooperThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">Handler</span> <span class="n">mHandler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Looper</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="c1">// process incoming messages here</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样你的线程就具有了消息处理机制了，在Handler中进行消息处理.
Looper最主要的有四个:</p>

<figure class='code'><figcaption><span>Looper</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="nf">prepare</span><span class="o">();</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="nf">myLooper</span><span class="o">();</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="nf">loop</span><span class="o">();</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quit</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法如下：</p>

<ol>
<li>在每个线程的run()方法中的最开始调用Looper.prepare()，这是为线程初始化消息队列。</li>
<li>之后调用Looper.myLooper()获取此Looper对象的引用。这不是必须的，但是如果你需要保存Looper对象的话，一定要在prepare()之后，否则调用在此对象上的方法不一定有效果，如looper.quit()就不会退出。</li>
<li>在run()方法中添加Handler来处理消息</li>
<li>添加Looper.loop()调用，这是让线程的消息队列开始运行，可以接收消息了。</li>
<li>在想要退出消息循环时，调用Looper.quit()注意，这个方法是要在对象上面调用，很明显，用对象的意思就是要退出具体哪个Looper。如果run()中无其他操作，线程也将终止运行。</li>
</ol>


<h4>Handler</h4>

<p>Handler是用于操作线程内部的消息队列的类。Looper是用于给线程创建消息队列用的，也就是说Looper可以让消息队列(MessageQueue)附属在线程之内，并让消息队列循环起来，接收并处理消息。但，我们并不直接的操作消息队列，而是用Handler来操作消息队列，给消息队列发送消息，和从消息队列中取出消息并处理。这就是Handler的职责。</p>

<p>Handler主要有二个用途，一个是用于线程内部消息循环； 另外一个就是用于线程间通讯，主要方法：</p>

<figure class='code'><figcaption><span>Looper</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Handler</span><span class="o">.</span><span class="na">sendEmptyMessageDelayed</span><span class="o">(</span><span class="kt">int</span> <span class="n">msgid</span><span class="o">,</span> <span class="kt">long</span> <span class="n">after</span><span class="o">);</span>
</span><span class='line'><span class="n">Handler</span><span class="o">.</span><span class="na">sendMessageDelayed</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">,</span> <span class="kt">long</span> <span class="n">after</span><span class="o">);</span>
</span><span class='line'><span class="n">Handler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">,</span> <span class="kt">long</span> <span class="n">after</span><span class="o">);</span>
</span><span class='line'><span class="n">Handler</span><span class="o">.</span><span class="na">sendMessageAtTime</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">,</span> <span class="kt">long</span> <span class="n">timeMillis</span><span class="o">);</span>
</span><span class='line'><span class="n">Handler</span><span class="o">.</span><span class="na">sendEmptyMessageAtTime</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="kt">long</span> <span class="n">timeMiilis</span><span class="o">);</span>
</span><span class='line'><span class="n">Handler</span><span class="o">.</span><span class="na">postAtTime</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">,</span> <span class="kt">long</span> <span class="n">timeMillis</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
需要注意一点的是，线程内部消息循环并不是并发处理，也就是所有的消息都是在Handler所属的线程内处理的，所以虽然你用post(Runnable r)，发给MessageQueue一个Runnable，但这并不会创建新的线程来执行，处理此消息时仅是调用r.run()。（想要另起线程执行，必须把Runnable放到一个Thread中）。</p>

<h4>Handler</h4>

<p>一般会使用Handler handler = new Handler(){&hellip;}创建Handler。这样创建的handler是在主线程即UI线程下的Handler，
即这个Handler是与UI线程下的默认Looper绑定的。Looper是用于实现消息队列和消息循环机制的。
因此，如果是默认创建Handler那么如果线程是做一些耗时操作如网络获取数据等操作，这样创建Handler是不行的.
Android API提供了HandlerThread来创建线程。官网的解释是：Handy class for starting a new thread that has a looper.
The looper can then be used to create handler classes. Note that start() must still be called.</p>

<p>HandlerThread实际上就一个Thread，只不过它比普通的Thread多了一个Looper。</p>

<figure class='code'><figcaption><span>Looper</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HandlerThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'> <span class="kd">private</span> <span class="kt">int</span> <span class="n">mPriority</span><span class="o">;</span>
</span><span class='line'> <span class="kd">private</span> <span class="kt">int</span> <span class="n">mTid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'> <span class="kd">private</span> <span class="n">Looper</span> <span class="n">mLooper</span><span class="o">;</span>
</span><span class='line'> <span class="o">....</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>   <span class="n">mTid</span> <span class="o">=</span> <span class="n">Process</span><span class="o">.</span><span class="na">myTid</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Looper</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mLooper</span> <span class="o">=</span> <span class="n">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Process</span><span class="o">.</span><span class="na">setThreadPriority</span><span class="o">(</span><span class="n">mPriority</span><span class="o">);</span>
</span><span class='line'>            <span class="n">notifyAll</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">onLooperPrepared</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mTid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="o">....</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建HandlerThread时要把它启动了，即调用start()方法。然后创建Handler时将HandlerThread中的looper对象传入。
HandlerThread thread = new HandlerThread(&ldquo;MyHandlerThread&rdquo;);
thread.start();
mHandler = new Handler(thread.getLooper());
mHandler.post(new Runnable(){&hellip;});
那么这个Handler对象就是与HandlerThread这个线程绑定了（这时就不再是与UI线程绑定了，这样它处理耗时操作将不会阻塞UI。</p>

<figure class='code'><figcaption><span>Looper</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Handler</span> <span class="n">mHandler</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">HandlerThread</span> <span class="n">mHandlerThread</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="n">mRunning</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Button</span> <span class="n">btn</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">btn</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btn</span><span class="o">);</span>
</span><span class='line'>    <span class="n">btn</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mHandlerThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerThread</span><span class="o">(</span><span class="s">&quot;Test&quot;</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mHandlerThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(</span><span class="n">mHandlerThread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Runnable</span> <span class="n">mRunnable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">mRunning</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;MainActivity&quot;</span><span class="o">,</span> <span class="s">&quot;test HandlerThread...&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btn</span> <span class="o">:</span>
</span><span class='line'>        <span class="n">mHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">mRunnable</span><span class="o">);</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">default</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mRunning</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">removeCallbacks</span><span class="o">(</span><span class="n">mRunnable</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mRunning</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mRunning</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Asynchronous Executor]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/06/android-asynchronous-executor/"/>
    <updated>2014-03-06T00:22:27+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/06/android-asynchronous-executor</id>
    <content type="html"><![CDATA[<p>Executor框架便是Java 5中引入的，其内部使用了线程池机制，它在java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。因此，在Java 5之后，通过Executor来启动线程比使用Thread的start方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免this逃逸问题——如果我们在构造器中启动一个线程，因为另一个任务可能会在构造器结束之前开始执行，此时可能会访问到初始化了一半的对象用Executor在构造器中。</p>

<p>Executor框架包括：线程池，Executor，Executors，ExecutorService，CompletionService，Future，Callable等。</p>

<p>Executor接口中之定义了一个方法execute（Runnable command），该方法接收一个Runable实例，它用来执行一个任务，任务即一个实现了Runnable接口的类。</p>

<figure class='code'><figcaption><span>thread</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Executor</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">anExecutor</span><span class="o">;</span>
</span><span class='line'> <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">RunnableTask1</span><span class="o">());</span>
</span><span class='line'> <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">RunnableTask2</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以使用同步的方式，新任务没有启用新线程</p>

<figure class='code'><figcaption><span>thread</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">DirectExecutor</span> <span class="kd">implements</span> <span class="n">Executor</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">r</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'> <span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者异步的方式，每个新任务启用新线程。</p>

<figure class='code'><figcaption><span>thread</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">class</span> <span class="nc">ThreadPerTaskExecutor</span> <span class="kd">implements</span> <span class="n">Executor</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">r</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'> <span class="o">}}</span>
</span><span class='line'> <span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ExecutorService接口继承自Executor接口，它提供了更丰富的实现多线程的方法
ExecutorService是线程池的一个服务，可以随时关闭线程池，是继承Executor的。Executors是个工厂类，专门创建各种线程池。</p>

<p>Android常用的线程池有一下几种，在Executors里面对应的方法：</p>

<h4>newFixedThreadPool</h4>

<p>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。在任意点，在大多数 nThreads 线程会处于处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行后续的任务（如果需要）。在某个线程被显式地关闭之前，池中的线程将一直存在。</p>

<p>-newFixedThreadPool与cacheThreadPool差不多，也是能reuse就用，但不能随时建新的线程
-其独特之处:任意时间点，最多只能有固定数目的活动线程存在，此时如果有新的线程要建立，只能放在另外的队列中等待，直到当前的线程中某个线程终止直接被移出池子</p>

<p>-和cacheThreadPool不同，FixedThreadPool没有IDLE机制（可能也有，但既然文档没提，肯定非常长，类似依赖上层的TCP或UDP IDLE机制之类的），所以FixedThreadPool多数针对一些很稳定很固定的正规并发线程，多用于服务器</p>

<p>-从方法的源代码看，cache池和fixed 池调用的是同一个底层池，只不过参数不同:
fixed池线程数固定，并且是0秒IDLE（无IDLE）
cache池线程数支持0-Integer.MAX_VALUE(显然完全没考虑主机的资源承受能力），60秒IDLE</p>

<figure class='code'><figcaption><span>newFixedThreadPool</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">　　</span><span class="n">ExecutorService</span> <span class="n">pool</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="err">　　</span><span class="c1">//创建实现了Runnable接口对象，Thread对象当然也实现了Runnable接口</span>
</span><span class='line'><span class="err">　　</span><span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyThread</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyThread</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="n">Thread</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyThread</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="n">Thread</span> <span class="n">t4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyThread</span><span class="o">();</span><span class="err">　</span>
</span><span class='line'><span class="err">　　</span><span class="n">Thread</span> <span class="n">t5</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyThread</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="c1">//将线程放入池中进行执行</span>
</span><span class='line'><span class="err">　　</span><span class="n">pool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">t1</span><span class="o">);</span>
</span><span class='line'><span class="err">　　</span><span class="n">pool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">t2</span><span class="o">);</span>
</span><span class='line'><span class="err">　　</span><span class="n">pool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">t3</span><span class="o">);</span>
</span><span class='line'><span class="err">　　</span><span class="n">pool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">t4</span><span class="o">);</span>
</span><span class='line'><span class="err">　　</span><span class="n">pool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">t5</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　
　　</p>

<h4>单任务线程池，newSingleThreadExecutor：</h4>

<p>创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能。调用 execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。因此，长时间保持空闲的线程池不会使用任何资源。注意，可以使用 ThreadPoolExecutor 构造方法创建具有类似属性但细节不同（例如超时参数）的线程池。</p>

<p>-缓存型池子，先查看池中有没有以前建立的线程，如果有，就reuse.如果没有，就建一个新的线程加入池中
-缓存型池子通常用于执行一些生存期很短的异步型任务</p>

<p>-能reuse的线程，必须是timeout IDLE内的池中线程，缺省timeout是60s,超过这个IDLE时长，线程实例将被终止及移出池。
注意，放入CachedThreadPool的线程不必担心其结束，超过TIMEOUT不活动，其会自动被终止。</p>

<h4>newSingleThreadExecutor</h4>

<p>创建一个使用单个 worker 线程的 Executor，以无界队列方式来运行该线程。（注意，如果因为在关闭前的执行期间出现失败而终止了此单个线程，那么如果需要，一个新线程将代替它执行后续的任务）。可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。与其他等效的 newFixedThreadPool(1) 不同，可保证无需重新配置此方法所返回的执行程序即可使用其他的线程。</p>

<p>-单例线程，任意时间池中只能有一个线程
-用的是和cache池和fixed池相同的底层池，但线程数目是1,0秒IDLE（无IDLE）</p>

<h4>newScheduledThreadPool</h4>

<p>-调度型线程池
-这个池子里的线程可以按schedule依次delay执行，或周期执行</p>

<figure class='code'><figcaption><span>newScheduledThreadPool</span><a href='http://shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ScheduledExecutorService</span> <span class="c1">//执行周期性或定时任务</span>
</span><span class='line'>
</span><span class='line'><span class="n">schedule</span><span class="o">(</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">callable</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delay</span><span class="o">,</span> <span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="c1">//创建并执行在给定延迟后启用的 ScheduledFuture。</span>
</span><span class='line'>
</span><span class='line'><span class="n">schedule</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">command</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delay</span><span class="o">,</span> <span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="c1">//创建并执行在给定延迟后启用的一次性操作。</span>
</span><span class='line'>
</span><span class='line'><span class="n">scheduleAtFixedRate</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">command</span><span class="o">,</span> <span class="kt">long</span> <span class="n">initialDelay</span><span class="o">,</span> <span class="kt">long</span> <span class="n">period</span><span class="o">,</span> <span class="n">TimeUnitunit</span><span class="o">)</span><span class="c1">//创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期；也就是将在 initialDelay 后开始执行，然后在initialDelay+period 后执行，接着在 initialDelay + 2 * period 后执行，依此类推。</span>
</span><span class='line'>
</span><span class='line'><span class="n">scheduleWithFixedDelay</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">command</span><span class="o">,</span> <span class="kt">long</span> <span class="n">initialDelay</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delay</span><span class="o">,</span><span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">)</span><span class="c1">//创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟。</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Asynchronous Thread]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/03/android-asynchronous-Thread/"/>
    <updated>2014-03-03T22:32:57+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/03/android-asynchronous-Thread</id>
    <content type="html"><![CDATA[<h3>线程概述</h3>

<p>线程是一个程序的多个执行路径，执行调度的单位，依托于进程存在。 线程不仅可以共享进程的内存，而且还拥有一个属于自己的内存空间，这段内存空间也叫做线程栈，是在建立线程时由系统分配的，主要用来保存线程内部所使用的数据，如线程执行函数中所定义的变量。</p>

<h3>线程定义</h3>

<h4>继承java.lang.Thread类</h4>

<figure class='code'><figcaption><span>thread</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="o">(</span><span class="s">&quot;do something&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<p>注意：重写(override)run()方法在该线程的start()方法被调用后，JVM会自动调用run方法来执行任务；但是重载（overload）run()方法，该方法和普通的成员方法一样，并不会因调用该线程的start()方法而被JVM自动运行</p>

<h4>实现java.lang.runnable接口</h4>

<figure class='code'><figcaption><span>runnable</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyRunnable</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="o">(</span><span class="s">&quot;do something&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>线程的启动</h3>

<h4>1）如果是继承Thread类，则：</h4>

<figure class='code'><figcaption><span>startThread</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MyThread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyThread</span><span class="o">();</span>
</span><span class='line'><span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2)如果实现Runnable接口，则：</h4>

<figure class='code'><figcaption><span>startThread</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MyRunnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyRunnable</span><span class="o">();</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>       
</span></code></pre></td></tr></table></div></figure>


<h3>Android提供了从其它线程中访问UI线程：</h3>

<ul>
<li>Activity.runOnUiThread(Runnable);</li>
<li>View.post(Runnable);</li>
<li>View.postDelayed(Runnable);</li>
</ul>


<figure class='code'><figcaption><span>load</span><a href='http://www.shaojie.name'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">final</span> <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">loadImageFromNetwork</span><span class="o">(</span><span class="s">&quot;http://example.com/image.png&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">mImageView</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Asynchronous 介绍]]></title>
    <link href="http://www.shaojie.name/blog/2014/03/03/android-asynchronous-jie-shao/"/>
    <updated>2014-03-03T22:02:37+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/03/03/android-asynchronous-jie-shao</id>
    <content type="html"><![CDATA[<h3>进程与线程</h3>

<p>如果某个应用程序组件是第一次被启动，且这时应用程序也没有其他组件在运行，则Android系统会为应用程序创建一个包含单个线程的linux进程。默认情况下，同一个应用程序的所有组件都运行在同一个进程和线程里（叫做“main”主线程）。如果组件启动时，已经存在应用程序的进程了（因为应用程序的其它组件已经在运行了），则此组件会在已有的进程和线程中启动运行。不过，可以指定组件运行在其他进程里，也可以为任何进程创建额外的线程。</p>

<h4>进程</h4>

<p>默认情况下，同一个应用程序内的所有组件都是运行在同一个进程中的，大部分应用程序也不会去改变它。不过，如果需要指定某个特定组件所属的进程，则可以利用manifest 文件来达到目的。</p>

<p>manifest文件中的每种组件元素——<activity>、 <service>、 <receiver>和<provider>——都支持定义android:process属性，用于指定组件运行的进程。设置此属性即可实现每个组件在各自的进程中运行，或者某几个组件共享一个进程而其它组件运行于独立的进程。设置此属性也可以让不同应用程序的组件运行在同一个进程中——实现多个应用程序共享同一个Linux用户ID、赋予同样的权限。</p>

<p><application>元素也支持android:process属性，用于指定所有组件的默认进程。</p>

<p>如果内存不足，可又有其它为用户提供更紧急服务的进程需要更多内存，Android可能会决定关闭一个进程。在此进程中运行着的应用程序组件也会因此被销毁。当需要再次工作时，会为这些组件重新创建一个进程。</p>

<p>在决定关闭哪个进程的时候，Android系统会权衡它们相对用户的重要程度。比如，相对于一个拥有可见activity的进程，更有可能去关闭一个activity已经在屏幕上看不见的进程。也就是说，是否终止一个进程，取决于运行在此进程中组件的状态。终止进程的判定规则将在后续内容中讨论。</p>

<h3>进程的生命周期</h3>

<p>Android系统试图尽可能长时间地保持应用程序进程，但为了新建或者运行更加重要的进程，总是需要清除过时进程来回收内存。为了决定保留或终止哪个进程，根据进程内运行的组件及这些组件的状态，系统把每个进程都划入一个“重要性层次结构”中。重要性最低的进程首先会被清除，然后是下一个最低的，依此类推，这都是回收系统资源所必需的。</p>

<p>重要性层次结构共有5级，以下列表按照重要程度列出了各类进程（第一类进程是最重要的，将最后一个被终止）：</p>

<h5>1. 前台进程</h5>

<p>用户当前操作所必须的进程。满足以下任一条件时，进程被视作处于前台：</p>

<p>o     其中运行着正与用户交互的Activity（Activity对象的 onResume() 方法已被调用）。</p>

<p>o     其中运行着被正与用户交互的activity绑定的服务Service。</p>

<p>o     其中运行着“前台”服务Service——服务以startForeground()方式被调用。</p>

<p>o     其中运行着正在执行生命周期回调方法（onCreate()、onStart()或onDestroy()）的服务Service。</p>

<p>o     其中运行着正在执行onReceive()方法的BroadcastReceiver。</p>

<p>一般而言，任何时刻前台进程都是为数不多的，只有作为最后的策略——当内存不足以维持它们同时运行时——才会被终止。通常，设备这时候已经到了内存分页状态(memory paging state)的地步，终止一些前台进程是为了保证用户界面的及时响应。</p>

<h4>2. 可见进程</h4>

<p>没有前台组件、但仍会影响用户在屏幕上所见内容的进程。满足以下任一条件时，进程被认为是可见的：</p>

<p>o     其中运行着不在前台的Activity，但用户仍然可见到此activity（onPause()方法被调用了）。比如以下场合就可能发生这种情况：前台activity打开了一个对话框，而之前的activity还允许显示在后面。</p>

<p>o     其中运行着被可见（或前台）activity绑定的服务Service。</p>

<p>可见进程被认为是非常重要的进程，除非无法维持所有前台进程同时运行了，它们是不会被终止的。</p>

<h4>3. 服务进程</h4>

<p>此进程运行着由startService()方法启动的服务，它不会升级为上述两级别。尽管服务进程不直接和用户所见内容关联，但他们通常在执行一些用户关心的操作（比如在后台播放音乐或从网络下载数据）。因此，除非内存不足以维持所有前台、可见进程同时运行，系统会保持服务进程的运行。</p>

<h4>4. 后台进程</h4>

<p>包含目前用户不可见activity（Activity对象的onStop()方法已被调用）的进程。这些进程对用户体验没有直接的影响，系统可能在任意时间终止它们，以回收内存供前台进程、可见进程及服务进程使用。通常会有很多后台进程在运行，所以它们被保存在一个LRU（最近最少使用）列表中，以确保最近被用户使用的activity最后一个被终止。如果一个activity正确实现了生命周期方法，并保存了当前的状态，则终止此类进程不会对用户体验产生可见的影响。因为在用户返回时，activity会恢复所有可见的状态。关于保存和恢复状态的详细信息，请参阅Activities文档。</p>

<h4>5. 空进程</h4>

<p>不含任何活动应用程序组件的进程。保留这种进程的唯一目的就是用作缓存，以改善下次在此进程中运行组件的启动时间。为了在进程缓存和内核缓存间平衡系统整体资源，系统经常会终止这种进程。</p>

<p>依据进程中目前活跃组件的重要程度，Android会给进程评估一个尽可能高的级别。例如：如果一个进程中运行着一个服务和一个用户可见的activity，则此进程会被评定为可见进程，而不是服务进程。</p>

<p>此外，一个进程的级别可能会由于其它进程的依赖而被提高——为其它进程提供服务的进程级别永远不会低于使用此服务的进程。比如：如果A进程中的content provider为进程B中的客户端提供服务，或进程A中的服务被进程B中的组件所调用，则A进程至少被视为与进程B同样重要。</p>

<p>因为运行服务的进程级别是高于后台activity进程的，所以，如果activity需要启动一个长时间运行的操作，则为其启动一个服务service会比简单地创建一个工作线程更好些——尤其是在此操作时间比activity本身存在时间还要长久的情况下。比如，一个activity要把图片上传至Web网站，就应该创建一个服务来执行之，即使用户离开了此activity，上传还是会在后台继续运行。不论activity发生什么情况，使用服务可以保证操作至少拥有“服务进程”的优先级。同理，上一篇中的广播接收器broadcast receiver也是使用服务而非线程来处理耗时任务的。</p>

<h3>线程</h3>

<p>应用程序启动时，系统会为它创建一个名为“main”的主线程。主线程非常重要，因为它负责把事件分发给相应的用户界面widget——包括屏幕绘图事件。它也是应用程序与Android UI组件包（来自android.widget和android.view包）进行交互的线程。因此，主线程有时也被叫做UI线程。</p>

<p>系统并不会为每个组件的实例都创建单独的线程。运行于同一个进程中的所有组件都是在UI线程中实例化的，对每个组件的系统调用也都是由UI线程分发的。因此，对系统回调进行响应的方法（比如报告用户操作的onKeyDown()或生命周期回调方法）总是运行在UI线程中。</p>

<p>举个例子，当用户触摸屏幕上的按钮时，应用程序的UI线程把触摸事件分发给widget，widget先把自己置为按下状态，再发送一个显示区域已失效（invalidate）的请求到事件队列中。UI线程从队列中取出此请求，并通知widget重绘自己。</p>

<p>如果应用程序在与用户交互的同时需要执行繁重的任务，单线程模式可能会导致运行性能很低下，除非应用程序的执行时机刚好很合适。如果UI线程需要处理每一件事情，那些耗时很长的操作——诸如访问网络或查询数据库等——将会阻塞整个UI（线程）。一旦线程被阻塞，所有事件都不能被分发，包括屏幕绘图事件。从用户的角度看来，应用程序看上去像是挂起了。更糟糕的是，如果UI线程被阻塞超过一定时间（目前大约是5秒钟），用户就会被提示那个可恶的“应用程序没有响应”(ANR)对话框。如果引起用户不满，他可能就会决定退出并删除这个应用程序。</p>

<p>此外，Andoid的UI组件包并不是线程安全的。因此不允许从工作线程中操作UI——只能从UI线程中操作用户界面。于是，Andoid的单线程模式必须遵守两个规则：</p>

<ol>
<li>不要阻塞UI线程。</li>
<li>不要在UI线程之外访问Andoid的UI组件包。</li>
</ol>


<h3>ANR</h3>

<p>ANR定义：在Android上，如果你的应用程序有一段时间响应不够灵敏，系统会向用户显示一个对话框，这个对话框称作应用程序无响应（ANR：Application Not Responding）对话框。用户可以选择“等待”而让程序继续运行，也可以选择“强制关闭”。所以一个流畅的合理的应用程序中不能出现anr，而让用户每次都要处理这个对话框。因此，在程序里对响应性能的设计很重要，这样系统不会显示ANR给用户。</p>

<p>默认情况下，在android中Activity的最长执行时间是5秒，BroadcastReceiver的最长执行时间则是10秒。</p>

<h4>第一：什么会引发ANR？</h4>

<p>在Android里，应用程序的响应性是由Activity Manager和WindowManager系统服务监视的 。当它监测到以下情况中的一个时，Android就会针对特定的应用程序显示ANR：
1.在5秒内没有响应输入的事件（例如，按键按下，屏幕触摸）
2.BroadcastReceiver在10秒内没有执行完毕
造成以上两点的原因有很多，比如在主线程中做了非常耗时的操作，比如说是下载，io异常等。</p>

<p>潜在的耗时操作，例如网络或数据库操作，或者高耗时的计算如改变位图尺寸，应该在子线程里（或者以数据库操作为例，通过异步请求的方式）来完成。然而，不是说你的主线程阻塞在那里等待子线程的完成——也不是调用 Thread.wait()或是Thread.sleep()。替代的方法是，主线程应该为子线程提供一个Handler，以便完成时能够提交给主线程。以这种方式设计你的应用程序，将能保证你的主线程保持对输入的响应性并能避免由于5秒输入事件的超时引发的ANR对话框。</p>

<h4>第二：如何避免ANR？</h4>

<ol>
<li><p>运行在主线程里的任何方法都尽可能少做事情。特别是，Activity应该在它的关键生命周期方法（如onCreate()和onResume()）里尽可能少的去做创建操作。（可以采用重新开启子线程的方式，然后使用Handler+Message的方式做一些操作，比如更新主线程中的ui等）</p></li>
<li><p>应用程序应该避免在BroadcastReceiver里做耗时的操作或计算。但不再是在子线程里做这些任务（因为 BroadcastReceiver的生命周期短），替代的是，如果响应Intent广播需要执行一个耗时的动作的话，应用程序应该启动一个 Service。（此处需要注意的是可以在广播接受者中启动Service，但是却不可以在Service中启动broadcasereciver,关于原因后续会有介绍，此处不是本文重点）</p></li>
<li><p>避免在Intent Receiver里启动一个Activity，因为它会创建一个新的画面，并从当前用户正在运行的程序上抢夺焦点。如果你的应用程序在响应Intent广 播时需要向用户展示什么，你应该使用Notification Manager来实现。</p></li>
</ol>


<h3>后台线程（非UI线程）</h3>

<p>点击按钮下载图片</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void onClick(View v){
</span><span class='line'>  Bitmap b = loadImageFormNetWork("http://xxxxx.png");
</span><span class='line'>  mImageView.setImageBitmap(b);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面的代码在UI线程中执行，很容易导致ANR。所以一些耗时的操作，还是用异步方式来处理吧。后面将分别介绍Android平台可以使用的方式。</p>

<ol>
<li>Thread</li>
<li>Executor</li>
<li>HandlerThread</li>
<li>AsyncTask</li>
<li>Service</li>
<li>IntentService</li>
<li>AsyncQuery</li>
<li>Loader</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Search Syntax]]></title>
    <link href="http://www.shaojie.name/blog/2014/02/27/github-search-syntax/"/>
    <updated>2014-02-27T23:36:54+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/02/27/github-search-syntax</id>
    <content type="html"><![CDATA[<h3>Search Syntax</h3>

<p>如果你想精确的查找搜索结果，你可以一直使用<a href="http://www.shaojie.name/blog/2014/02/23/advanced-search/">高级搜索</a>,但是，使用正确的搜索语法可以帮助你更快速的找到你想要的结果，下面就介绍几种搜索语法。</p>

<h4>Greater Than Queries</h4>

<p>设想你想找所有与‘cats’有关的项目，而且筛选出它被用户标记星号(stars)的次数大于10次。你可以使用一些操作符帮助你完成。</p>

<p><p>><code>&gt;</code> 和 <code>&gt;=</code>符号代表“大于”和&#8221;大于等于&#8221;。例如下边的两个例子是等价的
<p>><code>cats stars:"&gt;10"</code>
<p>><code>cats stars:"&gt;=10"</code>
<br>
<br>
<p>>你也可以使用更加程序化的符号<code>..*</code>,它等价于<code>&gt;=</code>,代表查找所有大于等于10的。
<p>><code>cats stars:"10..*"</code>
<br>
<br></p>

<p><p>>符号<code>*</code>可以代表任意数字，所以<code>10 .. 50</code>等价于&#8221;所有大约等于10取小于等于50&#8221;。</p>

<h4>Less Than Queries</h4>

<p>如果你想找所有与‘cats’有关的项目，而且筛选出它被用户标记星号(stars)的次数小于10次。你可以使用类似的一些操作符帮助你完成。
<p>><code>&lt;</code> 和 <code>&lt;=</code>符号代表“小于”和&#8221;小于等于&#8221;。例如下边的两个例子是等价的
<p>><code>cats stars:"&lt;10"</code>
<p>><code>cats stars:"&lt;=9"</code>
<br>
<br>
<p>>你也可以使用更加程序化的符号<code>*..</code>,它等价于<code>&lt;=</code>,代表查找所有小等于10的。
<p>><code>cats stars:"*..10"</code>
<br>
<br></p>

<p><p>>符号<code>*</code>可以代表任意数字，所以<code>1 .. 10</code>等价于&#8221;所有大约等于1取小于等于10&#8221;。</p>

<h4>Range Queries</h4>

<p>当你要查找一些没有‘数量’标记的项目时，range查询这时就能显出2它的威力来了，比如你还是要查找与&#8217;cat&#8217;相关的项目，并且上次的更新时间在2014年1月低到今天的2014年2月28
<p>><code>cats pushed:2014-01-31..2014-02-28</code></p>

<h4>Omitting Spaces</h4>

<p>如果你更倾向更短的标记和更少的字符的话，你可以删除引号以及查询条件中多余的空格，仅当查询的条件中包含空格的时候才需要引号
<p>><code>cats stars:&gt;10</code>
<p>><code>cats stars:&lt;10</code>
<p>><code>cats pushed:2014-01-30..2014-02-28</code></p>

<h4>The power of NOT</h4>

<p>你可以使用<code>NOT</code>符号从你的搜索条件中排除关键字的项目，比如搜索···Hello···会返回很多包含<code>Hello World</code>相关的项目，但是如果在搜索条件中加入NOT像这样：
<p>><code>Hello NOT World</code>
<p>就会过滤掉排除包含<code>World</code>的。
<p><code>`NOT</code>符号只能用于String类型的关键字</p>

<h4>Filtering using Exclusion</h4>

<p>另一种缩小搜索范围的方式是排除子集。在搜索的条件的前面带上<code>-</code>，就能排除所有符合条件的结果集
<p>比如你想查找所有包含&#8217;cats&#8217;并且&#8217;stars&#8217;数量大于10并且不使用&#8217;javascript&#8217;
<p>><code>cats stars:&gt;10 -language:javascript</code></p>

<p><p>查找所有没有@defunkt的issues:
<p>><code>mentions:defunkt -user:github</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github高级搜索]]></title>
    <link href="http://www.shaojie.name/blog/2014/02/23/advanced-search/"/>
    <updated>2014-02-23T01:24:57+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/02/23/advanced-search</id>
    <content type="html"><![CDATA[<h3>Advanced Search</h3>

<p>使用<a href="https://github.com/search/advanced">高级搜索</a>可以让你近一步缩小搜索范围，你可以通过stars数目、forks数目、文件后缀名等过滤。当你在条件输入框填写条件的时候，它会自动的把高级查询拼接到上面的输入框中。</p>

<p><img src="https://github-images.s3.amazonaws.com/help/search/advanced_search.png" alt="Github " /></p>

<h3>总结</h3>

<p>关于高级查询，我们可以指定很多的参数，以方便我们快速查询，下一篇介绍<a href="http://www.shaojie.name/blog/2014/02/27/github-search-syntax/">搜索语法</a>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching Github]]></title>
    <link href="http://www.shaojie.name/blog/2014/02/22/searching-github/"/>
    <updated>2014-02-22T23:41:43+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/02/22/searching-github</id>
    <content type="html"><![CDATA[<h3>Searching Github</h3>

<p><p>目前Gihtub上有数以万计的开源项目、用户、代码段，要想从中搜索到自己想要的真是件让人头疼的事情。幸好，有一些搜索技巧可以帮助你快速找到你的结果。</p>

<h3>Find all the Things</h3>

<p><a href="https://github.com/search">Github Search</a> 的功能是基于<a href="https://help.github.com/articles/using-the-command-bar">CommandBar</a>。你可以输入任何你想要的查询条件，它会把所有符合条件的结果高亮显示出来。你也可以点击左侧选择一种编程语言或者点击搜索结果项目列表来进一步缩小搜索范围。</p>

<p>在这个搜索引擎下，搜索就像一个弹性的搜索集合，当有push代码到Github你就可以实时的检索到它们。这些结果来自Github上的开源项目，也包括你有权限操作的私有项目。</p>

<p>为了让搜索关联性更加准确，Github很保守的给出搜索索引，例如，forks的项目一般是不会被搜索出来的，除非这个项目比原始项目有更多的stars。</p>

<p><img src="https://github-images.s3.amazonaws.com/help/search/search_overview.png" alt="Github " /></p>

<h3>搜索类型</h3>

<h4>项目（Repositories）</h4>

<p>每个搜索项目都有一个项目活动的展示，这个可以帮助你找到一些活跃的项目，当然也包括你的私有项目
当你的搜索结果很多足有好几页的搜索结果，你可以对这些结果按照条件进行排序以便更容易找到结果</p>

<p>关于更好的搜索项目相关说明，你查看<a href="http://www.shaojie.name/https://help.github.com/articles/searching-repositories">搜索项目</a></p>

<h4>问题(Issues)</h4>

<p>Issues search可以让你浏览所有的public的项目以及你有权限的私有项目的问答。你可以选择查看某个组织的问答，也可以选择与某个用户相关的问答。</p>

<p>更多关于如何查找问题。请查看<a href="http://www.shaojie.name/https://help.github.com/articles/searching-issues">搜索问题</a></p>

<h4>代码(code)</h4>

<p>代码搜索可以让你查看所有的public项目以及你有权限的私有项目的代码。你可以带上下边的参数</p>

<ul>
<li>搜索结果的行号</li>
<li>代码语法的高亮显示</li>
<li>上次检索时间</li>
<li>通过文件后缀查找</li>
<li>通过路径查找</li>
<li>只查找我自己的项目</li>
</ul>


<p>更多关于如何搜索代码，请查看<a href="http://www.shaojie.name/https://help.github.com/articles/searching-code">代码搜索</a></p>

<h4>用户(Users)</h4>

<p>用户搜索界面包含所有你要的一切：精确的结果、你可以直接Follow这些用户
更多关于如果搜索用户，请查看<a href="http://www.shaojie.name/https://help.github.com/articles/searching-users">搜索用户</a></p>

<h3>结果排序</h3>

<p>默认，Github搜索结果以搜索匹配(best match)降序排序的，当然你也可以选择其他的排序方式。比如，你可以现在按照 Star fork 数量排序。对于问答（Issues），你可以按照创建时间或者更新时间排序</p>

<h3>总结</h3>

<p>Github Seaching基本的内容介绍完了，下一篇<a href="http://www.shaojie.name/blog/2014/02/23/advanced-search/">高级搜索</a>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建博客环境]]></title>
    <link href="http://www.shaojie.name/blog/2014/02/16/da-jian-bo-ke-huan-jing/"/>
    <updated>2014-02-16T00:33:40+08:00</updated>
    <id>http://www.shaojie.name/blog/2014/02/16/da-jian-bo-ke-huan-jing</id>
    <content type="html"><![CDATA[<h3>1.Octopress需要Ruby环境，RVM(Ruby Version Manager)负责安装和管理Ruby的环境。所以我们先在终端输入如下命令，来安装RVM</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://get.rvm.io | bash -s stable --ruby</span></code></pre></td></tr></table></div></figure>


<p>安装ruby1.9.3</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm rubygems lastest</span></code></pre></td></tr></table></div></figure>


<h3>2.安装Octpress</h3>

<p>在安装octpress之前，确保安装了git。
下载octpress</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octpress</span></code></pre></td></tr></table></div></figure>


<p>安装相关依赖</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>安装默认的Octpress主题</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h3>3.将博客部署到Github上</h3>

<p>Github的Page service可以免费托管博客，并且还可以自定义域名。</p>

<p>首先需要在GitHub上创建一个仓库，并将仓库名称按照这样的方式进行命名：<code>username.github.com</code>或<code>organization.github.com</code>。等后面配置完毕之后，我们就可以在浏览器中使用页面地址<code>http://username.github.com</code>来访问我们的博客。一般来说，我们希望在将博客的源码放到source分支下，并把生成的内容提交到master分支。</p>

<p>创建好仓库之后，我们需要利用octopress的一个配置rake任务来自动配置上面创建的仓库：可以让我们方便的部署GitHub page。在终端输入如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>完成上面的命令之后，我们就可以生成博客并真正的部署到仓库中了。执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>现在可以访问<code>http://username.github.com</code>了。注意：有时候可能会有延时，要等等10分钟左右才能打开。</p>

<p>不过博客的source需要单独提交，执行如下命令就可以将source提交到仓库的source分支下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'Initial souece comment'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>然后就能在浏览器中进行本地预览访问了：<code>http://127.0.0.1:4000/</code>或<code>http://localhost:4000/</code>，效果跟仓库中的一样。</p>

<h3>4.开始写博客</h3>

<p>新建一篇文章</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake 'new_post[title]'
</span><span class='line'>其中title为博文的文件名，创建出来的文件默认是markdown格式。上面的命令会创建出这样一个文件：source/_posts/2014-2-16-title.markdown</span></code></pre></td></tr></table></div></figure>


<p>打开这篇文章，可以看到</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: title
</span><span class='line'>date: 2014-0-16 00:33:40 +0800
</span><span class='line'>comments: true
</span><span class='line'>categoryies:
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>categories 填写文章的分类名</p>

<p>接着我们就可以在这个文件中写我们的博文。完成之后，我们可以预览和部署博文。下面是创建并部署博文的一个完整过程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake 'new_post[title]'
</span><span class='line'>rake generate
</span><span class='line'>git add .
</span><span class='line'>git commit -am "add new post"
</span><span class='line'>git push origin source
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<h3>5.添加分类列表</h3>

<p>保存一下代码到 plugins/category_list_tag.rb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module Jekyll
</span><span class='line'>  class CategoryListTag &lt; Liquid::Tag
</span><span class='line'>    def render(context)
</span><span class='line'>      html = ""
</span><span class='line'>      categories = context.registers[:site].categories.keys
</span><span class='line'>      categories.sort.each do |category|
</span><span class='line'>        posts_in_category = context.registers[:site].categories[category].size
</span><span class='line'>        category_dir = context.registers[:site].config['category_dir']
</span><span class='line'>        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)
</span><span class='line'>        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://www.shaojie.name/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>      end
</span><span class='line'>      html
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</span></code></pre></td></tr></table></div></figure>


<p>这个插件会向liquid注册一个名为category_list的tag，该tag就是以li的形式将站点所有的category组织起来。如果要将category加入到侧边导航栏，需要增加一个aside。
增加aside
复制以下代码到source/_includes/asides/category_list.html。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;section&gt;
</span><span class='line'>  &lt;h1&gt;Categories&lt;/h1&gt;
</span><span class='line'>  &lt;ul id="categories"&gt;
</span><span class='line'>    {% category_list %}
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<p>配置侧边栏需要修改_config.yml文件，修改其default_asides项:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [asides/category_list.html, asides/recent_posts.html]</span></code></pre></td></tr></table></div></figure>


<h3>6.添加微博秀</h3>

<p>先到微博秀里面生成自己的微博秀嵌入代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;iframe width="100%"
</span><span class='line'> height="550" 
</span><span class='line'> class="share_self"  
</span><span class='line'> frameborder="0" 
</span><span class='line'> scrolling="no" 
</span><span class='line'> src="http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=550&fansRow=2
</span><span class='line'>&ptype=1&speed=0&skin=1&isTitle=1&noborder=1
</span><span class='line'>&isWeibo=1&isFans=1&uid=1706688983
</span><span class='line'>&verifier=1a722b18&dpc=1"&gt;
</span><span class='line'>&lt;/iframe&gt;</span></code></pre></td></tr></table></div></figure>


<p>新建一个weibo.html 到source/_include/asides的下面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{% if site.weibo_uid %}
</span><span class='line'>&lt;section&gt;
</span><span class='line'>  &lt;h1&gt;新浪微博&lt;/h1&gt;
</span><span class='line'>  &lt;ul id="weibo"&gt;
</span><span class='line'>    &lt;li&gt;
</span><span class='line'>      &lt;iframe 
</span><span class='line'>        width="100%" 
</span><span class='line'>        height="550" 
</span><span class='line'>        class="share_self" 
</span><span class='line'>        frameborder="0" 
</span><span class='line'>        scrolling="no" 
</span><span class='line'>        src="http://widget.weibo.com/weiboshow/index.php?width=0&height=550
</span><span class='line'>        &ptype={% if site.weibo_pic %}1{% else %}0{% endif %}&speed=0&skin={{weibo_skin}}&isTitle=0&noborder=1
</span><span class='line'>&isWeibo={% if site.weibo_show %}1{% else %}0{% endif %}&isFans={{weibo_fansline}}&uid={{site.weibo_uid}}&verifier={{site.weibo_verifier}}"&gt;
</span><span class='line'>      &lt;/iframe&gt;
</span><span class='line'>    &lt;/li&gt;
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;
</span><span class='line'>{% endif %}
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<p>修改_config.xml中default_aside部分</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>... 
</span><span class='line'>default_asides: [asides/recent_posts.html, asides/weibo.html, asides/github.html, asides/[Twitter][].html, asides/googleplus.html]
</span><span class='line'>...
</span><span class='line'>weibo_uid: 1098907490
</span><span class='line'>weibo_verifier: abd54ad9
</span><span class='line'>weibo_fansline: 0   # 粉丝显示多少行
</span><span class='line'>weibo_show: true    # 是否显示最近微博内容
</span><span class='line'>weibo_pic: true     # 是否显示微博中的图片
</span><span class='line'>weibo_skin: 10      # 使用哪种配色风格，数字为从1开始的微博秀风格序号
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>7.评论和分享</h3>

<p>在<em>config.yml中增加一项： weibo_share: true
修改 source/</em>includes/post/sharing.html ，增加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{% if site.weibo_share %}
</span><span class='line'>     {% include post/weibo.html %}
</span><span class='line'> {% endif %}
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>


<p>增加文件：source/_includes/post/weibo.html</p>

<p>访问<a href="http://www.jiathis.com/">http://www.jiathis.com/</a> , 获取分享的代码</p>

<p>访问<a href="http://uyan.cc/,">http://uyan.cc/,</a> 获取评论的代码</p>

<p>把代码都加到weibo.html中</p>
]]></content>
  </entry>
  
</feed>
